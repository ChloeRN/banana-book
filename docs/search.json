[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"Welcome online version book Bayesian Analysis Capture-Recapture Data Hidden Markov Models – Theory Case Studies R. HMM framework gained much attention ecological literature last decade, suggested general modelling framework demography plant animal populations. particular, HMMs increasingly used analyse capture-recapture data estimate key population parameters (e.g., survival, dispersal, recruitment abundance) applications fields ecology.parallel, Bayesian statistics well established fast growing ecology related disciplines, resonates scientific reasoning allows accommodating uncertainty smoothly. popularity Bayesian statistics also comes availability free pieces software (WinBUGS, OpenBUGS, JAGS, Stan, NIMBLE) allow practitioners code analyses.book offers Bayesian treatment HMMs applied capture-recapture data. learn use R package NIMBLE seen many future Bayesian statistical ecology deal complex models /big data. important part book consists case studies presented tutorial style abide “learning ” philosophy.’m currently writing book, welcome feedback. may raise issue , amend directly R Markdown file generated page ’re reading clicking ‘Edit page’ icon right panel, email . Many thanks!Olivier Gimenez, Montpellier, France\nLast updated: February 11, 2022","code":""},{"path":"index.html","id":"license","chapter":"Welcome","heading":"License","text":"online version book licensed Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.code public domain, licensed Creative Commons CC0 1.0 Universal (CC0 1.0).","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"","code":""},{"path":"preface.html","id":"why-this-book","chapter":"Preface","heading":"Why this book?","text":"completed. capture-recapture data models, fields application.1 Brief history capture-recapture, switch state-space/hidden Markov model (HMM) formulation. Flexibility HMM decompose complex problems smaller pieces easier understand, model analyse. satellite guidance conservation endangered species. Bayes? Also three fav research topics – capture-recapture, HMM Bayes statistics – let’s enjoy great cocktail together.","code":""},{"path":"preface.html","id":"who-should-read-this-book","chapter":"Preface","heading":"Who should read this book?","text":"book aimed beginners ’re comfortable using R write basic code (including loops), well connoisseurs capture-recapture ’d like tap power Bayesian side statistics. audiences, thinking HMM framework help confidently building models make capture-recapture data.","code":""},{"path":"preface.html","id":"what-will-you-learn","chapter":"Preface","heading":"What will you learn?","text":"book divided five parts. first part aimed getting --speed Bayesian statistics, NIMBLE, hidden Markov models. second part teach capture-recapture models open populations, reproducible R code ease learning process. third part, focus issues inferring states (dealing uncertainty assignment, modelling waiting time distribution). fourth part provides real-world case studies scientific literature can reproduce using material covered previous chapters. problems can either ) used cement deepen understanding methods models, ii) adapted purpose, iii) serve teaching projects. fifth last chapter closes book take-home messages recommendations, list frequently asked questions references cited book. Likely amended feedbacks.","code":""},{"path":"preface.html","id":"what-wont-you-learn","chapter":"Preface","heading":"What won’t you learn?","text":"hardly maths book. equations use either simple enough understood without background maths, can skipped without prejudice. cover Bayesian statistics even hidden Markov models fully, provide just need work capture-recapture data. interested knowing topics, hopefully section Suggested reading end chapter put right direction. also number important topics specific capture-recapture cover, including closed-population capture-recapture models (Williams, Nichols, Conroy 2002), spatial capture-recapture models (Royle et al. 2013). models can treated HMMs, now usual formulation just fine. spatial considerations Covariates chapter w/ splines CAR. ’m sure yet SCR models (R. Glennie’s Biometrics paper HMMs open pop SCR easy Bayes transform implement NIMBLE).","code":""},{"path":"preface.html","id":"prerequisites","chapter":"Preface","heading":"Prerequisites","text":"book uses primarily R package NIMBLE, need install least R NIMBLE. bunch R packages used. can install running:","code":"\ninstall.packages(c(\n  \"magick\", \"MCMCvis\", \"nimble\", \"pdftools\", \n  \"tidyverse\", \"wesanderson\" \n))"},{"path":"preface.html","id":"acknowledgements","chapter":"Preface","heading":"Acknowledgements","text":"completed.","code":""},{"path":"preface.html","id":"how-this-book-was-written","chapter":"Preface","heading":"How this book was written","text":"writing book RStudio using bookdown. book website hosted GitHub Pages, automatically updated every push Github Actions. source available GitHub.version book ’re reading built R version 4.1.0 (2021-05-18) following packages:","code":""},{"path":"about-the-author.html","id":"about-the-author","chapter":"About the author","heading":"About the author","text":"name Olivier Gimenez (https://oliviergimenez.github.io/). senior (euphemism young anymore) scientist National Centre Scientific Research (CNRS) beautiful city Montpellier, France.struggled studying maths, obtained PhD applied statistics long time ago galaxy wine cheese. awarded habilitation (https://en.wikipedia.org/wiki/Habilitation) ecology evolution stop pretending understand colleagues talking . recently embarked sociology studies hey, .Lost somewhere interface animal ecology, statistical modeling social sciences, -called expertise lies population dynamics species distribution modeling address questions ecology conservation biology impact human activities management large carnivores. nothing without students colleagues kind enough bear .may find Twitter (https://twitter.com/oaggimenez), GitHub (https://github.com/oliviergimenez), get touch email.","code":""},{"path":"introduction.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"","code":""},{"path":"crashcourse.html","id":"crashcourse","chapter":"1 Bayesian statistics & MCMC","heading":"1 Bayesian statistics & MCMC","text":"","code":""},{"path":"crashcourse.html","id":"introduction-1","chapter":"1 Bayesian statistics & MCMC","heading":"1.1 Introduction","text":"first chapter, learn Bayesian theory , may use simple example. also see implement simulation algorithms implement Bayesian method complex analyses. exhaustive treatment Bayesian statistics, get need navigate rest book.","code":""},{"path":"crashcourse.html","id":"bayes-theorem","chapter":"1 Bayesian statistics & MCMC","heading":"1.2 Bayes’ theorem","text":"Let’s wait longer jump . Bayesian statistics relies Bayes’ theorem (law, rule, whatever prefer) named Reverend Thomas Bayes (Figure 1.1). theorem published 1763 two years Bayes’ death thanks friend’s efforts Richard Price, independently discovered Pierre-Simon Laplace (McGrayne 2011).\nFigure 1.1: Cartoon Thomas Bayes Bayes’ theorem background. Source: James Kulich\nsee minute, Bayes’ theorem conditional probabilities, somehow tricky understand. Conditional probability outcome event given event B, denote \\(\\Pr(\\mid B)\\), probability occurs, revised considering additional information event B occurred.2 order B appear important, make sure confuse \\(\\Pr(\\mid B)\\) \\(\\Pr(B \\mid )\\).Bayes’ theorem (Figure 1.2) gives \\(\\Pr(\\mid B)\\) using marginal probabilities \\(\\Pr()\\) \\(\\Pr(B)\\) \\(\\Pr(B \\mid )\\):\n\\[\\Pr(\\mid B) = \\displaystyle{\\frac{ \\Pr(B \\mid ) \\; \\Pr()}{\\Pr(B)}}.\\]\nOriginally, Bayes’ theorem seen way infer unkown cause particular effect B, knowing probability effect B given cause . Think example situation medical diagnosis needed, unkown disease B symptoms, doctor knows P(symptoms|disease) wants derive P(disease|symptoms). way reversing \\(\\Pr(B \\mid )\\) \\(\\Pr(\\mid B)\\) explains Bayesian thinking used referred ‘inverse probability.’\nFigure 1.2: Bayes’ theorem spelt blue neon. Source: Wikipedia\ndon’t know , need think twice messing letters around. find easier remember Bayes’ theorem written like this3:great think , exactly scientific method ! ’d like know plausible hypothesis based data collected, possibly compare several hypotheses among . respect, Bayesian reasoning matches scientific reasoning, probably explains Bayesian framework natural understanding statistics.might ask , Bayesian statistics default statistics? Clearly, futile wars male statisticians (including Ronald Fisher, Jerzy Neyman Egon Sharpe Pearson among others), little progress made two centuries. Also, recently, practical problems implement Bayes’ theorem. Recent advances computational power coupled development new algorithms led great increase application Bayesian methods within last three decades.","code":""},{"path":"crashcourse.html","id":"what-is-the-bayesian-approach","chapter":"1 Bayesian statistics & MCMC","heading":"1.3 What is the Bayesian approach?","text":"Typical statistical problems involve estimating parameter (several parameters) \\(\\theta\\) available data. , might used frequentist rather Bayesian method. frequentist approach, particular maximum likelihood estimation (MLE), assumes parameters fixed, unknown values estimated. Therefore classical estimates generally point estimates parameters interest. contrast, Bayesian approach assumes parameters fixed, unknown distribution4.Bayesian approach based upon idea , experimenter, begin prior beliefs system. collect data update prior beliefs basis observations. observations might arise field work, lab work expertise esteemed colleagues. updating process based upon Bayes’ theorem. Loosely, let’s say \\(= \\theta\\) \\(B = \\text{data}\\), Bayes’ theorem gives way estimate parameter \\(\\theta\\) given data :\\[{\\color{red}{\\Pr(\\theta \\mid \\text{data})}} = \\frac{\\color{blue}{\\Pr(\\text{data} \\mid \\theta)} \\times \\color{green}{\\Pr(\\theta)}}{\\color{orange}{\\Pr(\\text{data})}}.\\]\nLet’s spend time going quantity formula.left-hand side \\(\\color{red}{\\text{posterior distribution}}\\). represents know seen data. basis inference clearly ’re , distribution, possibly multivariate one parameter.right-hand side, \\(\\color{blue}{\\text{likelihood}}\\). quantity MLE approach. Yes, Bayesian frequentist approaches likelihood core, mostly explains results often differ much. likelihood captures information data, given model parameterized \\(\\theta\\).\\(\\color{green}{\\text{prior distribution}}\\). quantity represents know seeing data. source much discussion Bayesian approach. may vague don’t know anything \\(\\theta\\). Usually however, never start scratch, ’d like prior reflect information have5.Last, \\(\\color{orange}{\\Pr(\\text{data})}\\) sometimes called average likelihood obtained integrating likelihood respect prior \\(\\color{orange}{\\Pr(\\text{data}) = \\int{L(\\text{data} \\mid \\theta)\\Pr(\\theta) d\\theta}}\\) posterior standardized, integrates one posterior distribution. average likelihood integral dimension number parameters \\(\\theta\\) need estimate. quantity difficult, impossible, calculate general. one reasons Bayesian method wasn’t used recently, need algorithms estimate posterior distributions illustrate next section.","code":""},{"path":"crashcourse.html","id":"numerical-approx","chapter":"1 Bayesian statistics & MCMC","heading":"1.4 Approximating posteriors via numerical integration","text":"Let’s take example illustrate Bayes’ theorem. Say capture, mark release \\(n = 57\\) animals beginning winter, recapture \\(y = 19\\) animals alive6. ’d like estimate winter survival \\(\\theta\\).build model first. Assuming animals independent survival probability, \\(y\\) number alive animals end winter binomial distribution7 \\(n\\) trials \\(\\theta\\) probability success:\\[\\begin{align*}\ny &\\sim \\text{Binomial}(n, \\theta) &\\text{[likelihood]}\n\\end{align*}\\]likelihood can visualised R:\nFigure 1.3: Binomial likelihood \\(n = 57\\) released animals \\(y = 19\\) survivors winter. value survival (x-axis) corresponds maximum likelihood function (y-axis) MLE, proportion success example, close 0.33.\nBesides likelihood, priors another component model Bayesian approach. parameter probability, one thing know prior continuous random variable lies 0 1. reflect , often go uniform distribution \\(U(0,1)\\) imply vague priors. vague means survival , see data, probability falling 0.1 0.2 0.8 0.9, example.\\[\\begin{align*}\n\\theta &\\sim \\text{Uniform}(0, 1) &\\text{[prior }\\theta \\text{]}\n\\end{align*}\\]Now apply Bayes’ theorem. write R function computes product likelihood times prior, numerator Bayes’ theorem: \\(\\Pr(\\text{data} \\mid \\theta) \\times \\Pr(\\theta)\\)write another function calculates denominator, average likelihood: \\(\\Pr(\\text{data}) = \\int{L(\\theta \\mid \\text{data}) \\Pr(\\theta) d\\theta}\\)use R function integrate calculate integral denominator, implements quadrature techniques divide little squares area underneath curve delimited function integrate (numerator), count .get numerical approximation posterior Figure 1.4 applying Bayes’ theorem.\nFigure 1.4: Winter survival posterior distribution obtained numerical integration.\ngood numerical approximation survival posterior distribution? Ideally, want compare approximation true posterior distribution. Although closed-form expression posterior distribution general intractable, combine binomial likelihood together beta distribution prior, posterior distribution also beta distribution, makes amenable sorts exact calculations8. beta distribution continuous 0 1, extends uniform distribution situations outcomes equally likely. two parameters \\(\\) \\(b\\) control shape (Figure 1.5).\nFigure 1.5: distribution beta(\\(\\),\\(b\\)) different values \\(\\) \\(b\\). Note \\(= b = 1\\), get uniform distribution 0 1 top left panel. \\(\\) \\(b\\) equal, distribution symmetric, bigger \\(\\) \\(b\\), peaked distribution smaller variance.\n\nFigure 1.6: Comparison exact (dashed line) vs. numerical approximation (continuous line) winter survival posterior distribution.\nexample, single parameter estimate, winter survival. means dealing one-dimensional integral denominator pretty easy quadrature techniques R function integrate(). Now multiple parameters? example, imagine ’d like fit capture-recapture model detection probability \\(p\\) regression parameters \\(\\alpha\\) \\(\\beta\\) intercept slope relationship survival probability covariate, Bayes’ theorem gives posterior distribution three parameters together:\\[ \\Pr(\\alpha, \\beta, p \\mid \\text{data}) = \\frac{ \\Pr(\\text{data} \\mid \\alpha, \\beta, p) \\times \\Pr(\\alpha, \\beta, p)}{\\iiint \\, \\Pr(\\text{data} \\mid \\alpha, \\beta, p) \\Pr(\\alpha, \\beta, p) d\\alpha d\\beta dp} \\]\ntwo computational challenges formula. First, really wish calculate three-dimensional integral? answer , one-dimensional two-dimensional integrals much can go standard methods. Second, ’re interested posterior distribution parameter separately joint posterior distribution. -called marginal distribution \\(p\\) example obtained integrating parameters – two-dimensional integral example. Now imagine tens hundreds parameters estimate, integrals become highly multi-dimensional simply intractable. next section, introduce powerful simulation methods circumvent issue.","code":"\ny <- 19 # nb of success\nn <- 57 # nb of attempts\ngrid <- seq(0, 1, 0.01) # grid of values for survival\nlikelihood <- dbinom(y, n, grid) # compute binomial likelihood\ndf <- data.frame(survival = grid, likelihood = likelihood) \ndf %>%\n  ggplot() + \n  aes(x = survival, y = likelihood) + \n  geom_line(size = 1.5)\nnumerator <- function(theta) dbinom(y, n, theta) * dunif(theta, 0, 1)\ndenominator <- integrate(numerator,0,1)$value\ngrid <- seq(0, 1, 0.01) # grid of values for theta\nnumerical_posterior <- data.frame(survival = grid, \n                                  posterior = numerator(grid)/denominator) # Bayes' theorem\nnumerical_posterior %>%\n  ggplot() +\n  aes(x = survival, y = posterior) + \n  geom_line(size = 1.5)"},{"path":"crashcourse.html","id":"markov-chain-monte-carlo-mcmc","chapter":"1 Bayesian statistics & MCMC","heading":"1.5 Markov chain Monte Carlo (MCMC)","text":"early 1990s, statisticians rediscovered work 1950’s physics. famous paper lay fundations modern Bayesian statistics (Figure 1.7), authors use simulations approximate posterior distributions precision drawing large samples. neat trick avoid explicit calculation multi-dimensional integrals struggle using Bayes’ theorem.\nFigure 1.7: MCMC article cover. Source: Journal Chemical Physics\nsimulation algorithms called Markov chain Monte Carlo (MCMC), definitely gave boost Bayesian statistics. two parts MCMC, Markov chain Monte Carlo, let’s try make sense terms.","code":""},{"path":"crashcourse.html","id":"monte-carlo-integration","chapter":"1 Bayesian statistics & MCMC","heading":"1.5.1 Monte Carlo integration","text":"Monte Carlo stand ? Monte Carlo integration simulation technique calculate integrals function \\(f\\) random variable \\(X\\) distribution \\(\\Pr(X)\\) say \\(\\int f(X) \\Pr(X)dX\\). draw values \\(X_1,\\ldots,X_k\\) \\(\\Pr(X)\\) distribution \\(X\\), apply function \\(f\\) values, calculate mean new values \\(\\displaystyle{\\frac{1}{k}}\\sum_{=1}^k{f(X_i)}\\) approximate integral. Monte Carlo integration used Bayesian context? posterior distribution contains information need parameter estimated. dealing many parameters however, may want summarise posterior results calculating numerical summaries. simplest numerical summary mean posterior distribution, \\(E(\\theta) = \\int \\theta \\Pr(\\theta|\\text{data})\\), \\(X\\) \\(\\theta\\) now \\(f\\) identity function. Posterior mean can calculated Monte Carlo integration:may check mean just calculated matches closely expectation beta distribution10:Another useful numerical summary credible interval within parameter falls probability, usually 0.95 hence 95\\(\\%\\) credible interval. Finding bounds credible interval requires calculating quantiles, turn involves integrals use Monte Carlo integration. 95\\(\\%\\) credible interval winter survival can obtained R :","code":"\nsample_from_posterior <- rbeta(1000, 20, 39) # draw 1000 values from posterior survival beta(20,39)\nmean(sample_from_posterior) # compute mean with Monte Carlo integration\n## [1] 0.3369\n20/(20+39) # expectation of beta(20,39)\n## [1] 0.339\nquantile(sample_from_posterior, probs = c(2.5/100, 97.5/100))\n##   2.5%  97.5% \n## 0.2273 0.4631"},{"path":"crashcourse.html","id":"markov-chains","chapter":"1 Bayesian statistics & MCMC","heading":"1.5.2 Markov chains","text":"Markov chain? Markov chain random sequence numbers, number depends previous number. example weather home town Southern France, Montpellier, sunny day likely followed another sunny day, say probability 0.8, rainy day rarely followed another rainy day, say probability 0.1. dynamic Markov chain captured transition matrix \\(\\mathbf{\\Gamma}\\):\n\\[\n\\begin{matrix}\n& \\\\\n\\mathbf{\\Gamma} = \n    \\left ( \\vphantom{ \\begin{matrix} 12 \\\\ 12 \\end{matrix} } \\right .\n\\end{matrix}\n\\hspace{-1.2em}\n\\begin{matrix}\n    \\text{sunny tomorrow} & \\text{rainy tomorrow} \\\\ \n0.8 & 0.2 \\\\ \n0.9 & 0.1 \\\\ \n\\end{matrix}\n\\hspace{-0.2em}\n\\begin{matrix}\n& \\\\\n\\left . \\vphantom{ \\begin{matrix} 12 \\\\ 12 \\\\ 12 \\end{matrix} } \\right )\n    \\begin{matrix}\n    \\text{sunny today} \\\\ \\text{rainy today}\n    \\end{matrix}\n\\end{matrix}\n\\]\nrows weather today, columns weather tomorrow. cells give probability sunny rainy day tomorrow, given day sunny rainy today. certain conditions11, Markov chain converge unique stationary distribution. weather example, let’s run Markov chain 20 steps:row transition matrix converges distribution \\((0.82, 0.18)\\) number steps increases. Convergence happens matter state start , always probability 0.82 day sunny 0.18 day rainy.Back MCMC, core idea can build Markov chain given stationary distribution set desired posterior distribution.","code":"\nweather <- matrix(c(0.8, 0.2, 0.9, 0.1), nrow = 2, byrow = T) # transition matrix\nsteps <- 20\nfor (i in 1:steps){\n  weather <- weather %*% weather # matrix multiplication\n}\nround(weather, 2) # matrix product after 20 steps\n##      [,1] [,2]\n## [1,] 0.82 0.18\n## [2,] 0.82 0.18"},{"path":"crashcourse.html","id":"metropolis-algorithm","chapter":"1 Bayesian statistics & MCMC","heading":"1.5.3 Metropolis algorithm","text":"several ways constructing Markov chains Bayesian inference12. illustrate Metropolis algorithm implement practice13.Let’s go back example animal survival estimation. illustrate sampling survival posterior distribution. write functions likelihood, prior posterior.Metropolis algorithm works follows:pick value parameter estimated. start Markov chain – starting value.pick value parameter estimated. start Markov chain – starting value.decide go next, propose move away current value parameter – candidate value. , add current value random value e.g. normal distribution variance – proposal distribution. Metropolis algorithm particular case Metropolis-Hastings algorithm symmetric proposals.decide go next, propose move away current value parameter – candidate value. , add current value random value e.g. normal distribution variance – proposal distribution. Metropolis algorithm particular case Metropolis-Hastings algorithm symmetric proposals.compute ratio probabilities candidate current locations \\(R=\\displaystyle{\\frac{{\\Pr(\\text{candidate}|\\text{data})}}{{\\Pr(\\text{current}|\\text{data})}}}\\). magic MCMC happens, \\(\\Pr(\\text{data})\\), denominator Bayes’ theorem, appears numerator denominator \\(R\\) therefore cancels need calculated.compute ratio probabilities candidate current locations \\(R=\\displaystyle{\\frac{{\\Pr(\\text{candidate}|\\text{data})}}{{\\Pr(\\text{current}|\\text{data})}}}\\). magic MCMC happens, \\(\\Pr(\\text{data})\\), denominator Bayes’ theorem, appears numerator denominator \\(R\\) therefore cancels need calculated.posterior candidate location \\(\\Pr(\\text{candidate}|\\text{data})\\) higher current location \\(\\Pr(\\text{current}|\\text{data})\\), words candidate value plausible current value, definitely accept candidate value. , accept candidate value probability \\(R\\) reject probability \\(1-R\\). example, candidate value ten times less plausible current value, accept probability 0.1 reject probability 0.9. work practice? use continuous spinner lands somewhere 0 1 – call random spin \\(X\\). \\(X\\) smaller \\(R\\), move candidate location, otherwise remain current location. want accept reject often. practice, Metropolis algorithm acceptance probability 0.2 0.4, can achieved tuning variance normal proposal distribution.posterior candidate location \\(\\Pr(\\text{candidate}|\\text{data})\\) higher current location \\(\\Pr(\\text{current}|\\text{data})\\), words candidate value plausible current value, definitely accept candidate value. , accept candidate value probability \\(R\\) reject probability \\(1-R\\). example, candidate value ten times less plausible current value, accept probability 0.1 reject probability 0.9. work practice? use continuous spinner lands somewhere 0 1 – call random spin \\(X\\). \\(X\\) smaller \\(R\\), move candidate location, otherwise remain current location. want accept reject often. practice, Metropolis algorithm acceptance probability 0.2 0.4, can achieved tuning variance normal proposal distribution.repeat 2-4 number times – steps.repeat 2-4 number times – steps.Enough theory, let’s implement Metropolis algorithm R. Let’s start setting scene.Now follow 5 steps ’ve just described. First, pick starting value, store (step 1)., need function propose candidate value. add value taken normal distribution mean zero standard deviation call away. work logit scale make sure candidate value survival lies 0 1.Now ’re ready steps 2, 3 4. write loop take care step 5. start initial value 0.5 run algorithm 100 steps iterations.get following values.\nFigure 1.8: Visualisation Markov chain starting value 0.5, steps iterations x-axis, samples y-axis. graphical representation called trace plot.\nacceptance probability average number times accepted candidated value, 0.44 almost satisfying.\nFigure 1.9: Trace plot survival two chains starting 0.2 (yellow) 0.5 (blue) run 100 steps.\n\nFigure 1.10: Trace plot survival chain starting 0.5 1000 steps.\n’re , trace plot looks like beautiful lawn, see Section 1.6. find informative look animated version Figure 1.10, helps understanding stochastic behavior algorithm, also realise chains converge stationary distribution, see Figure 1.11.\nFigure 1.11: Animated trace plot survival three chains starting 0.2, 0.5 0.7 run 1000 steps.\nstationary distribution reached, may regard realisations Markov chain sample posterior distribution, obtain numerical summaries. next section, consider several important implementation issues.","code":"\n# 19 animals recaptured alive out of 57 captured, marked and released\nsurvived <- 19\nreleased <- 57\n\n# binomial log-likelihood function\nloglikelihood <- function(x, p){\n  dbinom(x = x, size = released, prob = p, log = TRUE)\n}\n\n# uniform prior density\nlogprior <- function(p){\n  dunif(x = p, min = 0, max = 1, log = TRUE)\n}\n\n# posterior density function (log scale)\nposterior <- function(x, p){\n  loglikelihood(x, p) + logprior(p) # - log(Pr(data))\n}\nsteps <- 100 # number of steps\ntheta.post <- rep(NA, steps) # vector to store samples\naccept <- rep(NA, steps) # keep track of accept/reject\nset.seed(1234) # for reproducibility\ninits <- 0.5\ntheta.post[1] <- inits\naccept[1] <- 1\nmove <- function(x, away = 1){ # by default, standard deviation of the proposal distribution is 1\n  logitx <- log(x / (1 - x)) # apply logit transform (-infinity,+infinity)\n  logit_candidate <- logitx + rnorm(1, 0, away) # add a value taken from N(0,sd=away) to current value\n  candidate <- plogis(logit_candidate) # back-transform (0,1)\n  return(candidate)\n}\nfor (t in 2:steps){ # repeat steps 2-4 (step 5)\n  \n  # propose candidate value for survival (step 2)\n  theta_star <- move(theta.post[t-1])\n  \n  # calculate ratio R (step 3)\n  pstar <- posterior(survived, p = theta_star)  \n  pprev <- posterior(survived, p = theta.post[t-1])\n  logR <- pstar - pprev # likelihood and prior are on the log scale\n  R <- exp(logR)\n  \n  # accept candidate value or keep current value (step 4)\n  X <- runif(1, 0, 1) # spin continuous spinner\n  if (X < R){\n    theta.post[t] <- theta_star # accept candidate value\n    accept[t] <- 1 # accept\n  }\n  else{\n    theta.post[t] <- theta.post[t-1] # keep current value\n    accept[t] <- 0 # reject\n  }\n}\nhead(theta.post) # first values\n## [1] 0.5000 0.2302 0.2906 0.2906 0.2980 0.2980\ntail(theta.post) # last values\n## [1] 0.2622 0.2622 0.2622 0.3727 0.3232 0.3862"},{"path":"crashcourse.html","id":"convergence-diag","chapter":"1 Bayesian statistics & MCMC","heading":"1.6 Assessing convergence","text":"","code":""},{"path":"crashcourse.html","id":"burn-in","chapter":"1 Bayesian statistics & MCMC","heading":"1.6.1 Burn-in","text":"practice, discard observations start Markov chain just use observations chain converged. initial observations discard usually referred burn-.simplest method determine length burn-period look trace plots. Going back example, see trace plot Figure 1.12 need least 100 iterations achieve convergence toward average survival around 0.3. always better conservative specifying length burn-period, example, use 250 even 500 iterations burn-. length burn-period can determined performing preliminary MCMC short runs.\nFigure 1.12: Determining length burn-period. chain starts value 0.99 rapidly stabilises, values bouncing back forth around 0.3 100th iteration onwards. may choose shaded area burn-, discard corresponding values.\nInspecting trace plot single run Markov chain useful. However, usually run Markov chain several times, starting different -dispersed points, check runs achieve stationary distribution. approach formalised using Brooks-Gelman-Rubin (BGR) statistic \\(\\hat{R}\\) measures ratio total variability combining multiple chains (-chain plus within-chain) within-chain variability. BGR statistic asks whether chain effect, much alike \\(F\\) test analysis variance. Values 1.1 indicate likely convergence.Back example, run two Markov chains starting values 0.2 0.8 using 100 5000 iterations, calculate BGR statistic using half number iterations length burn-. Figure 1.13, get value BGR statistic near 1 2000 iterations, suggests 2000 iterations burn-, evidence lack convergence.\nFigure 1.13: Brooks-Gelman-Rubin statistic function number iterations.\nimportant bear mind value near 1 BGR statistic necessary sufficient condition convergence. words, diagnostic tell sure Markov chain achieved convergence, .14","code":""},{"path":"crashcourse.html","id":"chain-length","chapter":"1 Bayesian statistics & MCMC","heading":"1.6.2 Chain length","text":"long chain needed produce reliable parameter estimates? answer question, need keep mind successive steps Markov chain independent – usually referred autocorrelation. Ideally, like keep autocorrelation low possible. , trace plots useful diagnose issues autocorrelation. Let’s get back survival example. Figure 1.14 shows trace plots different values standard deviation (parameter away) (normal) proposal distribution use propose candidate value (Section 1.5.3). Small big moves provide high correlations successive observations Markov chain, whereas standard deviation 1 allows efficient exploration parameter space. movement around parameter space referred mixing. Mixing bad chain makes small big moves, good otherwise.\nFigure 1.14: Trace plots different values standard deviation (SD) proposal distribution. Left: chain exhibits small moves mixing bad. Right: chain exhibits big moves mixing bad. Middle: chain exhibits adequate moves mixing good. thousand last iterations shown.\naddition trace plots, autocorrelation function (ACF) plots convenient way displaying strength autocorrelation given sample values. ACF plots provide autocorrelation successively sampled values separated increasing number iterations, lag (Figure 1.15).\nFigure 1.15: Autocorrelation function plots different values standard deviation (SD) proposal distribution. Left right: Autocorrelation strong, decreases slowly increasing lag mixing bad. Middle: Autocorrelation weak, decreases rapidly increasing lag mixing good.\nAutocorrelation necessarily big issue. Strongly correlated observations just require large sample sizes therefore longer simulations. many iterations exactly? effective sample size (n.eff) measures chain length taking account chain autocorrelation. check n.eff every parameter interest, interesting parameter combinations. general, need \\(\\text{n.eff} \\geq 1000\\) independent steps get reasonable Monte Carlo estimates model parameters. animal survival example, n.eff can calculated R coda::effectiveSize() function.expected, n.eff less number MCMC iterations autocorrelation. standard deviation proposal distribution 1 mixing good (Figures 1.14 1.15) get satisfying effective sample size.","code":""},{"path":"crashcourse.html","id":"what-if-you-have-issues-of-convergence","chapter":"1 Bayesian statistics & MCMC","heading":"1.6.3 What if you have issues of convergence?","text":"diagnosing MCMC convergence, () often run troubles. section find helpful tips hope.mixing bad effective sample size small, may just need increase burn-/sample . Using informative priors might also make Markov chains converge faster helping MCMC sampler (e.g. Metropolis algorithm) navigating efficiently parameter space. spirit, picking better initial values starting chain harm. , strategy consists using estimates simpler model MCMC chains converge.convergence issues persist, often problem model15. bug code? typo somewhere? mistake maths? often coding involved, issue can identified removing complexities, start simpler model find problem .general advice see model data generating tool first place, simulate data using realistic values parameters, try recover parameter values fitting model simulated data. Simulating model help understanding works, , data need get reasonable parameter estimates.see strategies improve convergence next chapters.16","code":""},{"path":"crashcourse.html","id":"summary","chapter":"1 Bayesian statistics & MCMC","heading":"1.7 Summary","text":"Bayes’ theorem, update beliefs (prior) new data (likelihood) get posterior beliefs (posterior): posterior \\(\\propto\\) likelihood \\(\\times\\) prior.Bayes’ theorem, update beliefs (prior) new data (likelihood) get posterior beliefs (posterior): posterior \\(\\propto\\) likelihood \\(\\times\\) prior.idea Markov chain Monte Carlo (MCMC) simulate values Markov chain stationary distribution equal posterior distribution ’re .idea Markov chain Monte Carlo (MCMC) simulate values Markov chain stationary distribution equal posterior distribution ’re .practice, run Markov chain multiple times starting -dispersed initial values.practice, run Markov chain multiple times starting -dispersed initial values.discard iterations initial burn-phase achieve convergence chains reach regime.discard iterations initial burn-phase achieve convergence chains reach regime., run chains long enough proceed calculating Monte Carlo estimates numerical summaries (e.g. posterior means credible intervals) parameters., run chains long enough proceed calculating Monte Carlo estimates numerical summaries (e.g. posterior means credible intervals) parameters.","code":""},{"path":"crashcourse.html","id":"suggested-reading","chapter":"1 Bayesian statistics & MCMC","heading":"1.8 Suggested reading","text":"Gelman, . Hill, J. (2006). Data Analysis Using Regression Multilevel/Hierarchical Models (Analytical Methods Social Research). Cambridge: Cambridge University Press.Gelman, . Hill, J. (2006). Data Analysis Using Regression Multilevel/Hierarchical Models (Analytical Methods Social Research). Cambridge: Cambridge University Press.Gelman, . colleagues (2020). Bayesian workflow. arXiv preprint.Gelman, . colleagues (2020). Bayesian workflow. arXiv preprint.McCarthy, M. (2007). Bayesian Methods Ecology. Cambridge: Cambridge University Press.McCarthy, M. (2007). Bayesian Methods Ecology. Cambridge: Cambridge University Press.McElreath, R. (2020). Statistical Rethinking: Bayesian Course Examples R Stan (2nd ed.). CRC Press.McElreath, R. (2020). Statistical Rethinking: Bayesian Course Examples R Stan (2nd ed.). CRC Press.","code":""},{"path":"intronimble.html","id":"intronimble","chapter":"2 NIMBLE tutorial","heading":"2 NIMBLE tutorial","text":"","code":""},{"path":"intronimble.html","id":"introduction-2","chapter":"2 NIMBLE tutorial","heading":"2.1 Introduction","text":"second chapter, get familiar NIMBLE, R package implements --date MCMC algorithms fitting complex models. NIMBLE spares coding MCMC algorithms hand, requires specification likelihood priors model parameters. illustrate NIMBLE main features simple example, ideas hold problems.","code":""},{"path":"intronimble.html","id":"what-is-nimble","chapter":"2 NIMBLE tutorial","heading":"2.2 What is NIMBLE?","text":"NIMBLE stands Numerical Inference statistical Models using Bayesian Likelihood Estimation. Briefly speaking, NIMBLE R package implements MCMC algorithms generate samples posterior distribution model parameters. Freed burden coding MCMC algorithms, specify likelihood priors apply Bayes theorem. , NIMBLE uses syntax similar R syntax, make life easier. -called BUGS language also used programs like WinBUGS, OpenBUGS, JAGS.use NIMBLE may ask? short answer NIMBLE capable much just running MCMC algorithms! First, work within R, background NIMBLE translate code C++ (general) faster computation. Second, NIMBLE extends BUGS language writing new functions distributions , borrow written others. Third, NIMBLE gives full control MCMC samplers, may pick algorithms defaults. Fourth, NIMBLE comes library numerical methods MCMC algorithms, including sequential Monte Carlo (particle filtering) Monte Carlo Expectation Maximization (maximum likelihood). Last least, development team friendly helpful, based users’ feedbacks, NIMBLE folks work constantly improving package capabilities.\nFigure 2.1: Logo NIMBLE R package designed Luke Larson. Ask Perry context meaning.\n","code":""},{"path":"intronimble.html","id":"getting-started","chapter":"2 NIMBLE tutorial","heading":"2.3 Getting started","text":"First things first, let’s forget load nimble package:Note can install nimble like R package, Windows users need install Rtools, Mac users need install Xcode. https://r-nimble.org/download.Now let’s go back example animal survival previous chapter. First step build model specifying binomial likelihood uniform prior survival probability theta. use nimbleCode() function wrap code within curly brackets:can check model R object contains code:code , survived released known, theta needs estimated. line survived ~ dbinom(theta, released) states number successes animals survived winter survived distributed (’s ~) binomial released trials probability success survival theta. line theta ~ dunif(0, 1) assigns uniform 0 1 prior distribution survival probability. need, likelihood priors model parameters, NIMBLE knows Bayes theorem. last line lifespan <- - 1/log(theta) calculates quantity derived theta, expected lifespan assuming constant survival17.comments:common distributions available NIMBLE. Among others, use later book dbeta, dmultinom dnorm. find need NIMBLE, can write distribution illustrated Section 2.4.common distributions available NIMBLE. Among others, use later book dbeta, dmultinom dnorm. find need NIMBLE, can write distribution illustrated Section 2.4.matter order write line code, NIMBLE uses called declarative language building models. brief, write code tells NIMBLE want achieve, get . contrast, imperative language requires write want program step step.matter order write line code, NIMBLE uses called declarative language building models. brief, write code tells NIMBLE want achieve, get . contrast, imperative language requires write want program step step.can think models NIMBLE graphs Figure 2.2. graph made relations (edges) can two types. stochastic relation signaled ~ sign defines random variable model, survived theta. deterministic relation signaled <- sign, like lifespan. Relations define nodes left - children - terms nodes right - parents, relations directed edges parents children. graphs called directed acyclic graph DAG.\n\n\nFigure 2.2: Graph animal survival model. Survived stochastic node defined parents released theta, lifespan deterministic node value defined exactly value parent theta.\n\ncan think models NIMBLE graphs Figure 2.2. graph made relations (edges) can two types. stochastic relation signaled ~ sign defines random variable model, survived theta. deterministic relation signaled <- sign, like lifespan. Relations define nodes left - children - terms nodes right - parents, relations directed edges parents children. graphs called directed acyclic graph DAG.\nFigure 2.2: Graph animal survival model. Survived stochastic node defined parents released theta, lifespan deterministic node value defined exactly value parent theta.\nSecond step workflow read data. use list component corresponds known quantity model:can proceed data passed way, know little NIMBLE sees data. NIMBLE distinguishes data constants. Constants values change, e.g. vectors known index values indices used define -loops. Data values might want change, basically anything appears left ~. Declaring relevant values constants better computational efficiency, easy forget, fortunately NIMBLE distinguish data constants. use distinction data constants chapter, next chapters become important.Third step tell NIMBLE nodes model like keep track , words quantities ’d like inference . model want survival theta lifespan:general many quantities model, including little interest worth monitoring, full control verbosity prove handy.Fourth step specify initial values model parameters. make sure MCMC algorithm explores posterior distribution, start different chains different parameter values. can specify initial values chain list put yet another list:Alternatively, can write simple R function generates random initial values:Firth last step, need tell NIMBLE number chains run, say n.chain, long burn-period , say n.burnin, number iterations following burn-period used posterior inference. NIMBLE, specify total number iterations, say n.iter, number posterior samples per chain n.iter - n.burnin. NIMBLE also allows discarding samples burn-, procedure known thinning, use book18.now ingredients run model, sample posterior distribution model parameters using MCMC simulations. accomplished using function nimbleMCMC():NIMBLE goes several steps explain Section 2.5. Function nimbleMCMC() takes arguments might find useful. example, can suppress progress bar find depressing running long simulations progressBar = FALSE. can also get summary outputs specifying summary = TRUE. Check ?nimbleMCMC details.Now let’s inspect mcmc.output:R object mcmc.output list three components, one MCMC chain. Let’s look chain1 example:component list matrix. rows, 4000 samples posterior distribution theta, corresponds n.iter - n.burnin iterations. columns, quantities monitor, theta lifespan. , can compute posterior mean theta:can also obtain 95% credible interval theta:Let’s visualise posterior distribution theta histogram:less painful ways posterior inference. book, use R package MCMCvis19 summarise visualize MCMC outputs, perfectly valid options like ggmcmc20 basicMCMCplots21. Shall demonstrate options?Let’s load package MCMCvis:get common numerical summaries, function MCMCsummary() job:can use caterpillar plot visualise posterior distributions theta MCMCplot():point represents posterior median, thick line 50% credible interval thin line 95% credible interval.trace posterior density theta can obtained MCMCtrace():can also add diagnostics convergence discussed previous chapter:calculated lifespan directly model lifespan <- -1/log(theta). can also calculate quantity outside NIMBLE. nice -product using MCMC simulations: can obtain posterior distribution quantity function model parameters applying function samples posterior distribution parameters. example, need samples posterior distribution theta, pool three chains :get samples posterior distribution lifespan, apply function calculate lifespan samples posterior distribution survival:usual , can calculate posterior mean 95% credible interval:can also visualise posterior distribution lifespan:Now ’re good go. NIMBLE workflow provided nimbleMCMC() allows build models make inference. can achieve software like WinBUGS JAGS.NIMBLE just another MCMC engine. provides programming environment full control building models estimating parameters. NIMBLE allows write functions distributions build models, choose alternative MCMC samplers code new ones. flexibility often comes faster convergence.honest, learning improvements software takes reading experimentation, might well need use features. ’s fine. next sections, cover advanced material. may skip sections go back material later need .","code":"\nlibrary(nimble)\nmodel <- nimbleCode({\n  # likelihood\n  survived ~ dbinom(theta, released)\n  # prior\n  theta ~ dunif(0, 1)\n  # derived quantity\n  lifespan <- -1/log(theta)\n})\nmodel\n## {\n##     survived ~ dbinom(theta, released)\n##     theta ~ dunif(0, 1)\n##     lifespan <- -1/log(theta)\n## }\nmy.data <- list(released = 57, survived = 19)\nparameters.to.save <- c(\"theta\", \"lifespan\")\ninit1 <- list(theta = 0.1)\ninit2 <- list(theta = 0.5)\ninit3 <- list(theta = 0.9)\ninitial.values <- list(init1, init2, init3)\ninitial.values\n## [[1]]\n## [[1]]$theta\n## [1] 0.1\n## \n## \n## [[2]]\n## [[2]]$theta\n## [1] 0.5\n## \n## \n## [[3]]\n## [[3]]$theta\n## [1] 0.9\ninitial.values <- function() list(theta = runif(1,0,1))\ninitial.values()\n## $theta\n## [1] 0.8356\nn.iter <- 5000\nn.burnin <- 1000\nn.chains <- 3\nmcmc.output <- nimbleMCMC(code = model,\n                          data = my.data,\n                          inits = initial.values,\n                          monitors = parameters.to.save,\n                          niter = n.iter,\n                          nburnin = n.burnin,\n                          nchains = n.chains)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nstr(mcmc.output)\n## List of 3\n##  $ chain1: num [1:4000, 1] 0.36 0.432 0.374 0.374 0.412 ...\n##   ..- attr(*, \"dimnames\")=List of 2\n##   .. ..$ : NULL\n##   .. ..$ : chr \"theta\"\n##  $ chain2: num [1:4000, 1] 0.325 0.325 0.384 0.384 0.475 ...\n##   ..- attr(*, \"dimnames\")=List of 2\n##   .. ..$ : NULL\n##   .. ..$ : chr \"theta\"\n##  $ chain3: num [1:4000, 1] 0.42 0.296 0.337 0.399 0.399 ...\n##   ..- attr(*, \"dimnames\")=List of 2\n##   .. ..$ : NULL\n##   .. ..$ : chr \"theta\"\ndim(mcmc.output$chain1)\n## [1] 4000    1\nhead(mcmc.output$chain1)\n##       theta\n## [1,] 0.3604\n## [2,] 0.4323\n## [3,] 0.3739\n## [4,] 0.3739\n## [5,] 0.4125\n## [6,] 0.4125\nmean(mcmc.output$chain1[,'theta'])\n## [1] 0.3402\nquantile(mcmc.output$chain1[,'theta'], probs = c(2.5, 97.5)/100)\n##   2.5%  97.5% \n## 0.2265 0.4575\nmcmc.output %>%\n  as_tibble() %>%\n  ggplot() +\n  geom_histogram(aes(x = chain1[,\"theta\"]), color = \"white\") +\n  labs(x = \"survival probability\")\nlibrary(MCMCvis)\nMCMCsummary(object = mcmc.output, round = 2)\n##       mean   sd 2.5%  50% 97.5% Rhat n.eff\n## theta 0.34 0.06 0.23 0.34  0.46    1  2764\nMCMCplot(object = mcmc.output, \n         params = 'theta')\nMCMCtrace(object = mcmc.output,\n          pdf = FALSE, # no export to PDF\n          ind = TRUE, # separate density lines per chain\n          params = \"theta\")\nMCMCtrace(object = mcmc.output,\n          pdf = FALSE,\n          ind = TRUE,\n          Rhat = TRUE, # add Rhat\n          n.eff = TRUE, # add eff sample size\n          params = \"theta\")\ntheta_samples <- c(mcmc.output$chain1[,'theta'], \n                   mcmc.output$chain2[,'theta'],\n                   mcmc.output$chain3[,'theta'])\nlifespan <- -1/log(theta_samples)\nmean(lifespan)\n## [1] 0.9379\nquantile(lifespan, probs = c(2.5, 97.5)/100)\n##   2.5%  97.5% \n## 0.6767 1.2885\nlifespan %>%\n  as_tibble() %>%\n  ggplot() +\n  geom_histogram(aes(x = value), color = \"white\") +\n  labs(x = \"lifespan\")"},{"path":"intronimble.html","id":"functions-in-nimble","chapter":"2 NIMBLE tutorial","heading":"2.4 Programming","text":"NIMBLE can write use functions, use existing R C/C++ functions. allows customize models way want.","code":""},{"path":"intronimble.html","id":"nimble-functions","chapter":"2 NIMBLE tutorial","heading":"2.4.1 NIMBLE functions","text":"NIMBLE provides nimbleFunctions programming. nimbleFunction like R function, plus can compiled faster computation. Going back animal survival example, can write nimbleFunction compute lifespan:Within nimbleFunction, run section gives function executed. written NIMBLE language. theta = double(0) returnType(double(0)) arguments tell NIMBLE input output single numeric values (scalars). Alternatively, double(1) double(2) vectors matrices, logical(), integer() character() logical, integer character values.can use nimbleFunction R:can compile use C++ code faster computation:can also use nimbleFunction model:rest workflow remains :nimbleFunctions, can mimic basic R syntax, linear algebra (e.g. compute eigenvalues), operate vectors matrices (e.g. inverse matrix), use logical operators (e.g. /) flow control (e.g. -else). also long list common less common distributions can used nimbleFunctions.learn everything need know writing nimbleFunctions, make sure read chapter 11 NIMBLE manual https://r-nimble.org/html_manual/cha-RCfunctions.html#cha-RCfunctions.","code":"\ncomputeLifespan <- nimbleFunction(\n    run = function(theta = double(0)) { # type declarations\n        ans <- -1/log(theta)\n        return(ans)\n        returnType(double(0))  # return type declaration\n    } )\ncomputeLifespan(0.8)\n## [1] 4.481\nCcomputeLifespan <- compileNimble(computeLifespan)\nCcomputeLifespan(0.8)\n## [1] 4.481\nmodel <- nimbleCode({\n  # likelihood\n  survived ~ dbinom(theta, released)\n  # prior\n  theta ~ dunif(0, 1)\n  # derived quantity\n  lifespan <- computeLifespan(theta)\n})\nmy.data <- list(survived = 19, released = 57)\nparameters.to.save <- c(\"theta\", \"lifespan\")\ninitial.values <- function() list(theta = runif(1,0,1))\nn.iter <- 5000\nn.burnin <- 1000\nn.chains <- 3\nmcmc.output <- nimbleMCMC(code = model,\n                          data = my.data,\n                          inits = initial.values,\n                          monitors = parameters.to.save,\n                          niter = n.iter,\n                          nburnin = n.burnin,\n                          nchains = n.chains)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nMCMCsummary(object = mcmc.output, round = 2)\n##          mean   sd 2.5%  50% 97.5% Rhat n.eff\n## lifespan 0.93 0.16 0.66 0.92  1.30    1  2909\n## theta    0.34 0.06 0.22 0.34  0.46    1  2714"},{"path":"intronimble.html","id":"calling-rc-functions","chapter":"2 NIMBLE tutorial","heading":"2.4.2 Calling R/C++ functions","text":"’re like , lazy write functions, can rely scientific community use existing C, C++ R code. trick write nimbleFunction wraps access code can used NIMBLE. example, imagine ’d like use R function myfunction(), either function wrote , function available favorite R package:Now wrap function using nimbleRcall() nimbleExternalCall() C C++ function:call nimbleRcall() , argument prototype specifies inputs (single numeric value double(0)) R function Rfun generates outputs returnType (single numeric value double(0)).Now can call R function model (nimbleFunctions):rest workflow remains :Evaluating R function within NIMBLE slows MCMC sampling , can live , cost easily offset convenience able use existing R functions.Another advantage using nimbleRcall() (nimbleExternalCall()) can keep large objects model, NIMBLE handle MCMC sampling. objects constants change run NIMBLE. Letting R manipulating objects save time, usually time lose calling R within NIMBLE.","code":"\nmyfunction <- function(x) {\n  -1/log(x)\n}\nRmyfunction <- nimbleRcall(prototype = function(x = double(0)){}, \n                           Rfun = 'myfunction',\n                           returnType = double(0))\nmodel <- nimbleCode({\n  # likelihood\n  survived ~ dbinom(theta, released)\n  # prior\n  theta ~ dunif(0, 1)\n  lifespan <- Rmyfunction(theta)\n})\nmy.data <- list(survived = 19, released = 57)\nparameters.to.save <- c(\"theta\", \"lifespan\")\ninitial.values <- function() list(theta = runif(1,0,1))\nn.iter <- 5000\nn.burnin <- 1000\nn.chains <- 3\nmcmc.output <- nimbleMCMC(code = model,\n                          data = my.data,\n                          inits = initial.values,\n                          monitors = parameters.to.save,\n                          niter = n.iter,\n                          nburnin = n.burnin,\n                          nchains = n.chains)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nMCMCsummary(object = mcmc.output, round = 2)\n##          mean   sd 2.5%  50% 97.5% Rhat n.eff\n## lifespan 0.94 0.16 0.67 0.92  1.30 1.01  2454\n## theta    0.34 0.06 0.22 0.34  0.46 1.00  2534"},{"path":"intronimble.html","id":"user-defined-distributions","chapter":"2 NIMBLE tutorial","heading":"2.4.3 User-defined distributions","text":"nimbleFunctions can provide user-defined distributions NIMBLE. need write functions density (d) simulation (r) distribution. example, write binomial distribution:need define nimbleFunctions R’s global environment accessed:set. can run workflow:nimbleFunctions offers infinite possibilities customize models algorithms. Besides covered already, can write samplers. see example minute, first need tell NIMBLE workflow.","code":"\n# density\ndmybinom <- nimbleFunction(\n  run = function(x = double(0), \n                 size = double(0), \n                 prob = double(0), \n                 log = integer(0, default = 1)) {\n    returnType(double(0))\n    # compute binomial coefficient \n    lchoose <- lfactorial(size) - lfactorial(x) - lfactorial(size - x)\n    # binomial density function\n    logProb <- lchoose + x * log(prob) + (size - x) * log(1 - prob)\n    if(log) return(logProb)\n    else return(exp(logProb)) \n  })\n# simulation\nrmybinom <- nimbleFunction(\n  run = function(n = integer(0, default = 1),\n                 size = double(0),\n                 prob = double(0)) {\n    returnType(double(0))\n    return(rbinom(n = 1, size = size, prob = prob))    \n  })\nassign('dmybinom', dmybinom, .GlobalEnv)\nassign('rmybinom', rmybinom, .GlobalEnv)\nmodel <- nimbleCode({\n # likelihood\n survived ~ dmybinom(prob = theta, size = released)\n # prior\n theta ~ dunif(0, 1)\n})\nmy.data <- list(released = 57, survived = 19)\ninitial.values <- function() list(theta = runif(1,0,1))\nn.iter <- 5000\nn.burnin <- 1000\nn.chains <- 3\nmcmc.output <- nimbleMCMC(code = model,\n data = my.data,\n inits = initial.values,\n niter = n.iter,\n nburnin = n.burnin,\n nchains = n.chains)\n## Registering the following user-provided distributions: dmybinom\n## NIMBLE has registered dmybinom as a distribution based on its use in BUGS code. Note that if you make changes to the nimbleFunctions for the distribution, you must call 'deregisterDistributions' before using the distribution in BUGS code for those changes to take effect.\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nMCMCsummary(mcmc.output)\n##         mean      sd  2.5%    50%  97.5% Rhat n.eff\n## theta 0.3404 0.06082 0.226 0.3378 0.4609    1  2916"},{"path":"intronimble.html","id":"under-the-hood","chapter":"2 NIMBLE tutorial","heading":"2.5 Under the hood","text":"far, used nimbleMCMC() runs default MCMC workflow. perfecly fine applications. However, situations need customize MCMC samplers improve fasten convergence. NIMBLE allows look hood using detailed workflow several steps: nimbleModel(), configureMCMC(), buildMCMC(), compileNimble() runMCMC(). Note nimbleMCMC() .write model code, read data pick initial values :First step create model R object (uncompiled model) nimbleModel():can look nodes:can look values stored node:can also calculate log-likelihood initial value theta:ability NIMBLE access nodes model evaluate model likelihood can help identifying bugs code. Give example? Provide negative initial value theta, released data < survived.can obtain graph model Figure 2.2 :Second compile model compileNimble():compileNimble(), C++ code generated, compiled loaded back R can used R (compiled model):Now two versions model, survival R Csurvival C++. able separate steps model building parameter estimation strength NIMBLE. gives lot flexibility steps. example, imagine like fit model maximum likelihood, can wrapping model R function gets likelihood maximise function. Using C version model, can write:maximising likelihood (minimising negative log-likelihood), obtain maximum likelihood estimate animal survival, exactly 19 surviving animals 57 released animals 0.33.Third create MCMC configuration model configureMCMC():steps tells nodes monitored default, MCMC samplers assigned . theta monitored, samples posterior distribution simulated random walk sampler similar Metropolis sampler coded previous chapter Section 1.5.3.monitor lifespan addition theta, write:Third, create MCMC function buildMCMC() compile compileNimble():Note models nimbleFunctions need compiled can used specify project.Fourth, run NIMBLE runMCMC():run single chain runMCMC() allows use multiple chains nimbleMCMC().can look samples contains values simulated posterior distribution parameters monitor:, can obtain numerical summaries samplesSummary():first glance, using several steps instead nimbleMCMC() seems odds. useful? Mastering whole sequence steps allows play around samplers, changing samplers NIMBLE picks default, even writing samplers.","code":"\nmodel <- nimbleCode({\n  # likelihood\n  survived ~ dbinom(theta, released)\n  # prior\n  theta ~ dunif(0, 1)\n  # derived quantity\n  lifespan <- -1/log(theta)\n})\nmy.data <- list(survived = 19, released = 57)\ninitial.values <- list(theta = 0.5)\nsurvival <- nimbleModel(code = model,\n                        data = my.data,\n                        inits = initial.values)\nsurvival$getNodeNames()\n## [1] \"theta\"    \"lifespan\" \"survived\"\nsurvival$theta\n## [1] 0.5\nsurvival$survived\n## [1] 19\nsurvival$lifespan \n## [1] 1.443\n# this is -1/log(0.5)\nsurvival$calculate()\n## [1] -5.422\n# this is dbinom(x = 19, size = 57, prob = 0.5, log = TRUE)\nsurvival$plotGraph()\nCsurvival <- compileNimble(survival)\nCsurvival$theta\n## [1] 0.5\n# function for negative log-likelihood to minimize\nf <- function(par) {\n    Csurvival[['theta']] <- par # assign par to theta \n    ll <- Csurvival$calculate() # update log-likelihood with par value\n    return(-ll) # return negative log-likelihood\n}\n# evaluate function at 0.5 and 0.9\nf(0.5)\n## [1] 5.422\nf(0.9)\n## [1] 55.41\n# minimize function\nout <- optimize(f, interval = c(0,1))\nround(out$minimum, 2)\n## [1] 0.33\nsurvivalConf <- configureMCMC(survival)\n## ===== Monitors =====\n## thin = 1: theta\n## ===== Samplers =====\n## RW sampler (1)\n##   - theta\nsurvivalConf$addMonitors(c(\"lifespan\"))\n## thin = 1: theta, lifespan\nsurvivalConf\n## ===== Monitors =====\n## thin = 1: theta, lifespan\n## ===== Samplers =====\n## RW sampler (1)\n##   - theta\nsurvivalMCMC <- buildMCMC(survivalConf)\nCsurvivalMCMC <- compileNimble(survivalMCMC, project = survival)\nn.iter <- 5000\nn.burnin <- 1000\nsamples <- runMCMC(mcmc = CsurvivalMCMC, \n                   niter = n.iter,\n                   nburnin = n.burnin)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nhead(samples)\n##      lifespan  theta\n## [1,]   1.0529 0.3868\n## [2,]   1.0529 0.3868\n## [3,]   1.0529 0.3868\n## [4,]   1.0529 0.3868\n## [5,]   0.9114 0.3338\n## [6,]   0.9114 0.3338\nsamplesSummary(samples)\n##            Mean Median St.Dev. 95%CI_low 95%CI_upp\n## lifespan 0.9392 0.9211 0.15505    0.6870    1.2844\n## theta    0.3403 0.3377 0.05843    0.2333    0.4591"},{"path":"intronimble.html","id":"mcmc-samplers","chapter":"2 NIMBLE tutorial","heading":"2.6 MCMC samplers","text":"","code":""},{"path":"intronimble.html","id":"change-sampler","chapter":"2 NIMBLE tutorial","heading":"2.6.1 Default samplers","text":"default sampler used NIMBLE example? can answer question inspecting MCMC configuration obtained configureMCMC():Now control MCMC configuration, let’s mess . start removing default sampler:change slice sampler:Now can resume workflow:NIMBLE implements many samplers, list available ?samplers. example, high correlation (regression) parameters can make independent samplers inefficient. situation, block sampling might help consists proposing candidate values multivariate distribution acknowledges correlation parameters. Say something default samplers chosen NIMBLE?","code":"\n#survivalConf <- configureMCMC(survival)\nsurvivalConf$printSamplers()\n## [1] RW sampler: theta\nsurvivalConf$removeSamplers(c('theta'))\nsurvivalConf$printSamplers()\nsurvivalConf$addSampler(target = c('theta'),\n                        type = 'slice')\nsurvivalConf$printSamplers()\n## [1] slice sampler: theta\n# create a new MCMC function and compile it:\nsurvivalMCMC2 <- buildMCMC(survivalConf)\nCsurvivalMCMC2 <- compileNimble(survivalMCMC2, \n                                project = survival,\n                                resetFunctions = TRUE) # to compile new functions \n                                                       # into existing project, \n                                                       # need to reset nimbleFunctions\n# run NIMBLE:\nsamples2 <- runMCMC(mcmc = CsurvivalMCMC2, \n                    niter = n.iter,\n                    nburnin = n.burnin)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n# obtain numerical summaries:\nsamplesSummary(samples2)\n##            Mean Median St.Dev. 95%CI_low 95%CI_upp\n## lifespan 0.9359 0.9201 0.15761    0.6743    1.2850\n## theta    0.3389 0.3373 0.06006    0.2270    0.4592"},{"path":"intronimble.html","id":"user-defined-samplers","chapter":"2 NIMBLE tutorial","heading":"2.6.2 User-defined samplers","text":"Allowing code sampler another topic NIMBLE thrives. example, focus Metropolis algorithm Section 1.5.3 coded R. section, make nimbleFunction can use within model:Compared nimbleFunctions wrote earlier, my_metropolis() contains setup function ) gets dependencies parameter update run function Metropolis, target node, theta example ii) extracts control parameters, scale standard deviation proposal distribution example. run function implements steps Metropolis algorithm: (1) get log-likelihood function evaluated current value, (2) get current value, (3) apply logit transform , (4) propose candidate value perturbing current value normal noise controled standard deviation scale, (5) back-transform candidate value (6) plug model, (7) calculate log-likelihood function candidate value, (8) compute Metropolis ratio log scale, (9) compare output spinner Metropolis ratio decide whether (10) accept candidate value copy model mvSaved (11) reject keep current value copying mvSaved model. nimbleFunction used MCMC sampler, several constraints need respected like contains = sampler_BASE statement using four arguments model, mvSaved, target control setup function. course, NIMBLE implements advanced efficient version Metropolis algorithm, can look https://github.com/cran/nimble/blob/master/R/MCMC_samplers.R#L184.Now user-defined MCMC algorithm, can change default sampler new sampler Section 2.6.1. start scratch:print samplers used default, remove default sampler theta, replace my_metropolis() sampler standard deviation proposal distribution set 0.1, print make sure NIMBLE now uses new sampler:rest workflow unchanged:\nFigure 2.3: Trace plots different values standard deviation (scale) proposal distribution.\n","code":"\nmy_metropolis <- nimbleFunction(\n  name = 'my_metropolis', # fancy name for our MCMC sampler\n  contains = sampler_BASE,\n  setup = function(model, mvSaved, target, control) {\n    # i) get dependencies for 'target' in 'model'\n    calcNodes <- model$getDependencies(target) \n    # ii) get sd of proposal distribution\n    scale <- control$scale \n  },\n  run = function() {\n    # (1) log-lik at current value\n    initialLP <- model$getLogProb(calcNodes) \n    # (2) current parameter value\n    current <- model[[target]] \n    # (3) logit transform\n    lcurrent <- log(current / (1 - current))\n    # (4) propose candidate value\n    lproposal <- lcurrent  + rnorm(1, mean = 0, scale) \n    # (5) back-transform\n    proposal <- plogis(lproposal)\n    # (6) plug candidate value in model \n    model[[target]] <<- proposal \n    # (7) log-lik at candidate value\n    proposalLP <- model$calculate(calcNodes)\n    # (8) compute lik ratio on log scale\n    lMHR <- proposalLP - initialLP \n    # (9) spin continuous spinner and compare to ratio\n    if(runif(1,0,1) < exp(lMHR)) { \n      # (10) if candidate value is accepted, update current value\n      copy(from = model, to = mvSaved, nodes = calcNodes, logProb = TRUE, row = 1)\n    } else {\n      ## (11) if candidate value is accepted, keep current value\n      copy(from = mvSaved, to = model, nodes = calcNodes, logProb = TRUE, row = 1)\n    }\n  },\n  methods = list(\n    reset = function() {}\n  )\n)\nmodel <- nimbleCode({\n  # likelihood\n  survived ~ dbinom(theta, released)\n  # prior\n  theta ~ dunif(0, 1)\n})\nmy.data <- list(survived = 19, released = 57)\ninitial.values <- function() list(theta = runif(1,0,1))\nsurvival <- nimbleModel(code = model, \n                        data = my.data, \n                        inits = initial.values())\nCsurvival <- compileNimble(survival)\nsurvivalConf <- configureMCMC(survival)\n## ===== Monitors =====\n## thin = 1: theta\n## ===== Samplers =====\n## RW sampler (1)\n##   - theta\nsurvivalConf$printSamplers()\n## [1] RW sampler: theta\nsurvivalConf$removeSamplers(c('theta'))\nsurvivalConf$addSampler(target = 'theta', \n                        type = 'my_metropolis', \n                        control = list(scale = 0.1)) # standard deviation\n                                                     # of proposal distribution\nsurvivalConf$printSamplers()\n## [1] my_metropolis sampler: theta,  scale: 0.10000000000000001\nsurvivalMCMC <- buildMCMC(survivalConf)\nCsurvivalMCMC <- compileNimble(survivalMCMC, \n                               project = survival)\nsamples <- runMCMC(mcmc = CsurvivalMCMC, \n                   niter = 5000, \n                   nburnin = 1000)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nsamplesSummary(samples)\n##         Mean Median St.Dev. 95%CI_low 95%CI_upp\n## theta 0.3331 0.3299 0.06023    0.2279    0.4623"},{"path":"intronimble.html","id":"tips-and-tricks","chapter":"2 NIMBLE tutorial","heading":"2.7 Tips and tricks","text":"closing chapter NIMBLE, thought ’d useful section gathering tips tricks make life easier. tips tricks, NIMBLE users, ’d happy hear : email , edit chapter file issue GitHub.","code":""},{"path":"intronimble.html","id":"precision-vs-standard-deviation","chapter":"2 NIMBLE tutorial","heading":"2.7.1 Precision vs standard deviation","text":"sotware like JAGS, normal distribution parameterized mean mu parameter called precision, often denoted tau, inverse variance used . Say use normal prior parameter epsilon epsilon ~ dnorm(mu, tau). ’d like prior vague, therefore tau small, say 0.01 variance normal distribution large, 1/0.01 = 100 . subtlety source problems (frustration) forget second parameter precision use epsilon ~ dnorm(mu, 100), variance actually 1/100 = 0.01 prior informative, peaked mu. NIMBLE can use parameterisation well natural parameterisation epsilon ~ dnorm(mu, sd = 100) avoids confusion.","code":""},{"path":"intronimble.html","id":"indexing","chapter":"2 NIMBLE tutorial","heading":"2.7.2 Indexing","text":"NIMBLE guess dimensions objects. software like JAGS can write sum.x <- sum(x[]) calculate sum components x. NIMBLE need write sum.x <- sum(x[1:n]) sum components x 1 n. Specifying dimensions can annoying, find useful forces think keep code self-explaining.","code":""},{"path":"intronimble.html","id":"faster-compilation","chapter":"2 NIMBLE tutorial","heading":"2.7.3 Faster compilation","text":"might noticed compilation NIMBLE takes time. large models (lots nodes), compilation can take forever. can set calculate = FALSE nimbleModel() disable calculation deterministic nodes log-likelihood. can also use useConjugacy = FALSE configureMCMC() disable search conjugate samplers. animal survival example, :","code":"\nmodel <- nimbleCode({\n  # likelihood\n  survived ~ dbinom(theta, released)\n  # prior\n  theta ~ dunif(0, 1)\n})\nmy.data <- list(survived = 19, released = 57)\ninitial.values <- function() list(theta = runif(1,0,1))\nsurvival <- nimbleModel(code = model, \n                        data = my.data, \n                        inits = initial.values(),\n                        calculate = FALSE) # first tip\nCsurvival <- compileNimble(survival)\nsurvivalConf <- configureMCMC(survival)\n## ===== Monitors =====\n## thin = 1: theta\n## ===== Samplers =====\n## RW sampler (1)\n##   - theta\nsurvivalMCMC <- buildMCMC(survivalConf, useConjugacy = FALSE) # second tip\nCsurvivalMCMC <- compileNimble(survivalMCMC, \n                               project = survival)\nsamples <- runMCMC(mcmc = CsurvivalMCMC, \n                   niter = 5000, \n                   nburnin = 1000)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nsamplesSummary(samples)\n##         Mean Median St.Dev. 95%CI_low 95%CI_upp\n## theta 0.3362  0.335    0.06    0.2269    0.4588"},{"path":"intronimble.html","id":"updating-mcmc-chains","chapter":"2 NIMBLE tutorial","heading":"2.7.4 Updating MCMC chains","text":"Sometimes useful run MCMC chains little bit longer improve convergence. Re-starting run previous section, can use:can extract matrix previous MCMC samples augmented new ones obtain numerical summaries:can check more_samples contains 10000 samples, 4000 call runMCMC() plus 6000 additional samples.","code":"\nniter_ad <- 6000\nCsurvivalMCMC$run(niter_ad, reset = FALSE)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## NULL\nmore_samples <- as.matrix(CsurvivalMCMC$mvSamples)\nsamplesSummary(more_samples)\n##         Mean Median St.Dev. 95%CI_low 95%CI_upp\n## theta 0.3401 0.3389 0.06059    0.2276    0.4633"},{"path":"intronimble.html","id":"reproducibility","chapter":"2 NIMBLE tutorial","heading":"2.7.5 Reproducibility","text":"want results reproducible, can control state R random number generator setSeed argument functions nimbleMCMC() runMCMC(). Going back animal survival example, can check two calls nimbleMCMC() give results setSeed set value:","code":"\n# first call to nimbleMCMC()\nmcmc.output1 <- nimbleMCMC(code = model,\n                           data = my.data,\n                           inits = initial.values,\n                           niter = 5000,\n                           nburnin = 1000,\n                           nchains = 3,\n                           summary = TRUE,\n                           setSeed = 123)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n# second call to nimbleMCMC()\nmcmc.output2 <- nimbleMCMC(code = model,\n                           data = my.data,\n                           inits = initial.values,\n                           niter = 5000,\n                           nburnin = 1000,\n                           nchains = 3,\n                           summary = TRUE,\n                           setSeed = 123)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n# outputs from both calls are the same\nmcmc.output1$summary$all.chains\n##         Mean Median St.Dev. 95%CI_low 95%CI_upp\n## theta 0.3387  0.336 0.05968    0.2282    0.4608\nmcmc.output2$summary$all.chains\n##         Mean Median St.Dev. 95%CI_low 95%CI_upp\n## theta 0.3387  0.336 0.05968    0.2282    0.4608"},{"path":"intronimble.html","id":"parallelization","chapter":"2 NIMBLE tutorial","heading":"2.7.6 Parallelization","text":"speed analyses, can run MCMC chains parallel. package jagsUI22 accomplishes JAGS users. , use parallel package parallel computation:First create cluster using total amount cores one make sure computer can go working:wrap workflow function run parallel:Now run code using parLapply(), uses cluster nodes execute workflow:call parLapply, specify X = c(2022, 666) ensure reproducibility. use two alues 2022 666 set seed workflow(), means run two instances workflow, two MCMC chains. Note also line set.seed(123) workflow() function ensure reproducibility drawing randomly initial values.’s good practice close cluster stopCluster() processes continue run background slow processes:inspecting results, can see object output list two components, one MCMC chain:Eventually, can obtain numerical summaries:","code":"\nlibrary(parallel)\nnbcores <- detectCores() - 1\nmy_cluster <- makeCluster(nbcores)\nworkflow <- function(seed, data) {\n  \n  library(nimble)\n  \n  model <- nimbleCode({\n    # likelihood\n    survived ~ dbinom(theta, released)\n    # prior\n    theta ~ dunif(0, 1)\n  })\n  \n  set.seed(123) # for reproducibility\n  initial.values <- function() list(theta = runif(1,0,1))\n  \n  survival <- nimbleModel(code = model, \n                          data = data, \n                          inits = initial.values())\n  Csurvival <- compileNimble(survival)\n  survivalMCMC <- buildMCMC(Csurvival)\n  CsurvivalMCMC <- compileNimble(survivalMCMC)\n  \n  samples <- runMCMC(mcmc = CsurvivalMCMC, \n                     niter = 5000, \n                     nburnin = 1000,\n                     setSeed = seed)\n  \n  return(samples)\n}\noutput <- parLapply(cl = my_cluster, \n                    X = c(2022, 666),\n                    fun = workflow, \n                    data = list(survived = 19, released = 57))\nstopCluster(my_cluster)\nstr(output)\n## List of 2\n##  $ : num [1:4000, 1] 0.393 0.369 0.346 0.346 0.346 ...\n##   ..- attr(*, \"dimnames\")=List of 2\n##   .. ..$ : NULL\n##   .. ..$ : chr \"theta\"\n##  $ : num [1:4000, 1] 0.435 0.435 0.435 0.435 0.243 ...\n##   ..- attr(*, \"dimnames\")=List of 2\n##   .. ..$ : NULL\n##   .. ..$ : chr \"theta\"\nMCMCsummary(output)\n##         mean      sd   2.5%    50%  97.5% Rhat n.eff\n## theta 0.3361 0.06148 0.2215 0.3335 0.4594    1  1779"},{"path":"intronimble.html","id":"incomplete-initialization","chapter":"2 NIMBLE tutorial","heading":"2.7.7 Incomplete initialization","text":"run nimbleMCMC() nimbleModel(), may get warnings thrown NIMBLE like ‘model fully initialized’ ‘value NA NaN even trying calculate.’ necessarily error, ‘reflects missing values model variables’ (incomplete initialization). situation, NIMBLE initialize nodes NAs drawing priors, work . possible, try initialize nodes (full initialization). process can bit headache, helps understanding model structure better. Going back animal survival example, let’s purposedly forget provide initial value theta:see variables initialized, use initializeInfo():Now know theta initialized, can fix issue resume workflow:","code":"\nmodel <- nimbleCode({\n  # likelihood\n  survived ~ dbinom(theta, released)\n  # prior\n  theta ~ dunif(0, 1)\n})\n#initial.values <- list(theta = runif(1,0,1))\nsurvival <- nimbleModel(code = model, \n                        data = list(survived = 19, released = 57))\n# survival$calculate() # gives NA\nsurvival$initializeInfo()\nsurvival$theta <- 0.5 # assign initial value to theta\nsurvival$calculate() \n## [1] -5.422\n\nCsurvival <- compileNimble(survival)\nsurvivalMCMC <- buildMCMC(Csurvival)\n## ===== Monitors =====\n## thin = 1: theta\n## ===== Samplers =====\n## RW sampler (1)\n##   - theta\nCsurvivalMCMC <- compileNimble(survivalMCMC)\n\nsamples <- runMCMC(mcmc = CsurvivalMCMC, \n                   niter = 5000, \n                   nburnin = 1000)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n\nsamplesSummary(samples)\n##         Mean Median St.Dev. 95%CI_low 95%CI_upp\n## theta 0.3359 0.3335 0.06088    0.2191    0.4602"},{"path":"intronimble.html","id":"vectorization","chapter":"2 NIMBLE tutorial","heading":"2.7.8 Vectorization","text":"Vectorization process replacing loop vector instead processing single value time, process set values . example, instead writing:write:Vectorization can make code efficient manipulating one vector node x[1:n] instead n nodes x[1], …, x[n]. Think example relation animal survival? Illustrate vectorized Bernoulli vectorized Binomial?","code":"\nfor(i in 1:n){ \n  x[i] <- mu + epsilon[i] \n}\nx[1:n] <- mu + epsilon[1:n]"},{"path":"intronimble.html","id":"summary-1","chapter":"2 NIMBLE tutorial","heading":"2.8 Summary","text":"NIMBLE R package implements MCMC algorithms generate samples posterior distribution model parameters. specify likelihood priors using BUGS language apply Bayes theorem.NIMBLE R package implements MCMC algorithms generate samples posterior distribution model parameters. specify likelihood priors using BUGS language apply Bayes theorem.NIMBLE just another MCMC engine. provides programming environment full control building models estimating parameters.NIMBLE just another MCMC engine. provides programming environment full control building models estimating parameters.core NIMBLE nimbleFunctions can write compile faster computation. nimbleFunctions can mimic basic R syntax, work vectors matrices, use logical operators flow control, specify many distributions.core NIMBLE nimbleFunctions can write compile faster computation. nimbleFunctions can mimic basic R syntax, work vectors matrices, use logical operators flow control, specify many distributions.two workflows run NIMBLE. situations, nimbleMCMC() serve well. need control, can adopt detailed workflow nimbleModel(), configureMCMC(), buildMCMC(), compileNimble() runMCMC().two workflows run NIMBLE. situations, nimbleMCMC() serve well. need control, can adopt detailed workflow nimbleModel(), configureMCMC(), buildMCMC(), compileNimble() runMCMC().full control workflow, can change default MCMC samplers even write samplers.full control workflow, can change default MCMC samplers even write samplers.","code":""},{"path":"intronimble.html","id":"suggested-reading-1","chapter":"2 NIMBLE tutorial","heading":"2.9 Suggested reading","text":"chapter, scratched surface NIMBLE capable . list pointers help going NIMBLE.NIMBLE folks make lot useful resources available official website https://r-nimble.org.NIMBLE folks make lot useful resources available official website https://r-nimble.org.NIMBLE manual https://r-nimble.org/html_manual/cha-welcome-nimble.html reads like book clear explanations relevant examples.NIMBLE manual https://r-nimble.org/html_manual/cha-welcome-nimble.html reads like book clear explanations relevant examples.can learn lot going examples https://r-nimble.org/examples training material NIMBLE workshops https://github.com/nimble-training.can learn lot going examples https://r-nimble.org/examples training material NIMBLE workshops https://github.com/nimble-training.can keep NIMBLE cheatsheet https://r-nimble.org/cheatsheets/NimbleCheatSheet.pdf near remind workflow, write use models, functions distributions available.can keep NIMBLE cheatsheet https://r-nimble.org/cheatsheets/NimbleCheatSheet.pdf near remind workflow, write use models, functions distributions available.motivation write book comes workshop co-teach colleagues, including Perry de Valpine Daniel Turek NIMBLE development team. material (slides videos) available https://github.com/oliviergimenez/bayesian-cr-workshop.motivation write book comes workshop co-teach colleagues, including Perry de Valpine Daniel Turek NIMBLE development team. material (slides videos) available https://github.com/oliviergimenez/bayesian-cr-workshop.questions, feel free get touch community NIMBLE users emailing discussion group https://groups.google.com/forum/#!forum/nimble-users. great place learn, folks take time answer questions kind provide constructive answers. possible, make sure provide reproducible example illustrating problem.questions, feel free get touch community NIMBLE users emailing discussion group https://groups.google.com/forum/#!forum/nimble-users. great place learn, folks take time answer questions kind provide constructive answers. possible, make sure provide reproducible example illustrating problem.Last, can cite following reference using NIMBLE publication:Last, can cite following reference using NIMBLE publication:de Valpine, P., D. Turek, C. J. Paciorek, C. Anderson-Bergman, D. Temple Lang, R. Bodik (2017). Programming Models: Writing Statistical Algorithms General Model Structures NIMBLE. Journal Computational Graphical Statistics 26 (2): 403–13.","code":""},{"path":"hmmcapturerecapture.html","id":"hmmcapturerecapture","chapter":"3 Hidden Markov models","heading":"3 Hidden Markov models","text":"","code":""},{"path":"hmmcapturerecapture.html","id":"introduction-3","chapter":"3 Hidden Markov models","heading":"3.1 Introduction","text":"third chapter, learn basics Markov models fit longitudinal data using NIMBLE. real life, individuals may go undetected status unknow, also learn manipulate extension Markov models hidden states, -called hidden Markov models. Mention marginalization pooling. ","code":""},{"path":"hmmcapturerecapture.html","id":"longitudinal-data","chapter":"3 Hidden Markov models","heading":"3.2 Longitudinal data","text":"Let’s get back survival example, denote \\(z_i\\) state individual \\(\\) \\(z_i = 1\\) alive \\(z_i = 0\\) dead. total \\(z = \\displaystyle{\\sum_{=1}^{n}{z_i}}\\) survivors \\(n\\) released animals winter survival probability \\(\\phi\\). model far combination binomial likelihood Beta prior parameters 1 1, also uniform distribution 0 1. can written :\\[\\begin{align*}\n   z &\\sim \\text{Binomial}(n, \\phi) &\\text{[likelihood]}\n   \\\\\n  \\phi &\\sim \\text{Beta}(1, 1) &\\text{[prior }\\phi \\text{]} \\\\\n\\end{align*}\\]binomial distribution just sum independent Bernoulli outcomes, can rewrite model :\\[\\begin{align*}\n   z_i &\\sim \\text{Bernoulli}(\\phi), \\; = 1, \\ldots, N &\\text{[likelihood]}\n   \\\\\n  \\phi &\\sim \\text{Beta}(1, 1) &\\text{[prior }\\phi \\text{]} \\\\\n\\end{align*}\\]like flipping coin individual get survivor probability \\(\\phi\\).set , consider single winter. many species, ’ll need collect data long term get representative estimate survival. Therefore say big \\(T\\) five winters?Let us denote \\(z_{,t} = 1\\) individual \\(\\) alive winter \\(t\\), \\(z_{,t} = 2\\) dead. longitudinal data look like table . row individual \\(\\), columns winters \\(t\\), sampling occasions. Variable \\(z\\) indexed \\(\\) \\(t\\), takes value 1 individual \\(\\) alive winter \\(t\\), 2 otherwise.","code":""},{"path":"hmmcapturerecapture.html","id":"a-model-for-longitudinal-data","chapter":"3 Hidden Markov models","heading":"3.3 A model for longitudinal data","text":"Let’s think model data. objective remains , estimating survival. build model, ’ll make assumptions, go components write likelihood.déjà vu chaîne Markov chapitre MCMC","code":""},{"path":"hmmcapturerecapture.html","id":"assumptions","chapter":"3 Hidden Markov models","heading":"3.3.1 Assumptions","text":"First, assume state animal given winter, alive dead, dependent state winter . words, future depends present, past. Markov process.Second, animal alive given winter, probability survives next winter \\(\\phi\\). probability dies \\(1 - \\phi\\).Third, animal dead winter, remains dead, unless believe zombies.Markov process can represented way:realization Markov process , example:Going winter next driven survival mortality processes. probability going alive 1 alive 1 \\(\\phi\\). alive 1 dead 2 \\(1 - \\phi\\). probability remain dead 1, go state 2 dead state 2 dead.","code":""},{"path":"hmmcapturerecapture.html","id":"transition-matrix","chapter":"3 Hidden Markov models","heading":"3.3.2 Transition matrix","text":"might figured already, core Markov process made transition probabilities states alive dead.example, probability transitioning state alive \\(t-1\\) state alive \\(t\\) \\(\\Pr(z_{,t} = 1 | z_{,t-1} = 1) = \\gamma_{1,1}\\). survival probability \\(\\phi\\).probability dying interval \\((t-1, t)\\) \\(\\Pr(z_{,t} = 2 | z_{,t-1} = 1) = \\gamma_{1,2} = 1 - \\phi\\).Now animal dead \\(t-1\\), \\(\\Pr(z_t = 1 | z_{t-1} = 2) = 0\\) \\(\\Pr(z_{,t} = 2 | z_{,t-1} = 2) = 1\\).can gather probabilities transition states one occasion next matrix, say \\(\\mathbf{\\Gamma}\\), call transition matrix:\\[\\begin{align*}\n\\mathbf{\\Gamma} =\n\\left(\\begin{array}{cc}\n\\gamma_{1,1} & \\gamma_{1,2}\\\\\n\\gamma_{2,1} & \\gamma_{2,2}\n\\end{array}\\right) =\n\\left(\\begin{array}{cc}\n\\phi & 1 - \\phi\\\\\n0 & 1\n\\end{array}\\right)\n\\end{align*}\\]try remember states \\(t-1\\) rows, states \\(t\\) columns, often write:\\[\n\\begin{matrix}\n& \\\\\n\\mathbf{\\Gamma} =\n    \\left ( \\vphantom{ \\begin{matrix} 12 \\\\ 12 \\end{matrix} } \\right .\n\\end{matrix}\n\\hspace{-1.2em}\n\\begin{matrix}\n    z_t=& z_t=D \\\\ \\hdashline\n\\phi & 1-\\phi \\\\\n0 & 1\n\\end{matrix}\n\\hspace{-0.2em}\n\\begin{matrix}\n& \\\\\n\\left . \\vphantom{ \\begin{matrix} 12 \\\\ 12 \\end{matrix} } \\right )\n    \\begin{matrix}\n    z_{t-1}=\\\\ z_{t-1}=D\n    \\end{matrix}\n\\end{matrix}\n\\]Take time need navigate matrix, get familiar . example, may start alive \\(t\\) (first row) end dead \\(t+1\\) (first column) probability \\(1-\\phi\\).","code":""},{"path":"hmmcapturerecapture.html","id":"initial-states","chapter":"3 Hidden Markov models","heading":"3.3.3 Initial states","text":"Markov process start somewhere. need probabilities initial states, .e. states individual \\(t = 1\\).gather probability state (alive 1 dead 2) first winter vector. use \\(\\mathbf{\\delta} = \\left(\\Pr(z_{,1} = 1), \\Pr(z_{,1} = 2)\\right)\\).individuals marked released first winter, hence alive first captured, means state alive 1 sure. Therefore \\(\\mathbf{\\delta} = \\left(1, 0\\right)\\).","code":""},{"path":"hmmcapturerecapture.html","id":"likelihood","chapter":"3 Hidden Markov models","heading":"3.3.4 Likelihood","text":"Now built Markov model, need likelihood apply Bayes theorem. likelihood probability data, given model. data \\(z\\), therefore need \\(\\Pr(\\mathbf{z}) = \\Pr(z_1, z_2, \\ldots, z_{T-2}, z_{T-1}, z_T)\\).’re gonna work backward, starting last sampling occasion. Using conditional probabilities, likelihood can written product probability \\(z_T\\) .e. ’re alive last occasion given past history, states previous occasions, times probability past history:\\[\\begin{align*}\n\\Pr(\\mathbf{z}) &= \\Pr(z_T, z_{T-1}, z_{T-2}, \\ldots, z_1) \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)}\\\\\n                &= \\Pr(z_T | z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n\\end{align*}\\]Markov model, ’re memory less, probabilty next state, \\(z_T\\), depends current state, \\(z_{T-1}\\), previous states:\\[\\begin{align*}\n\\Pr(\\mathbf{z}) &= \\Pr(z_T, z_{T-1}, z_{T-2}, \\ldots, z_1) \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)}\\\\\n                &= \\Pr(z_T | z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n\\end{align*}\\]can apply reasoning \\(T-1\\). First use conditional probabilities:\\[\\begin{align*}\n\\Pr(\\mathbf{z}) &= \\Pr(z_T, z_{T-1}, z_{T-2}, \\ldots, z_1) \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)}\\\\\n                &= \\Pr(z_T | z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}, \\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)\\\\\n\\end{align*}\\]apply Markovian property:\\[\\begin{align*}\n\\Pr(\\mathbf{z}) &= \\Pr(z_T, z_{T-1}, z_{T-2}, \\ldots, z_1) \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)}\\\\\n                &= \\Pr(z_T | z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}, \\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)\\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}) \\Pr(z_{T-2}, \\ldots, z_1)\\\\\n\\end{align*}\\]\\(z_2\\). end expression likelihood:\\[\\begin{align*}\n\\Pr(\\mathbf{z}) &= \\Pr(z_T, z_{T-1}, z_{T-2}, \\ldots, z_1) \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)}\\\\\n                &= \\Pr(z_T | z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}, \\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)\\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}) \\Pr(z_{T-2}, \\ldots, z_1)\\\\\n                &= \\ldots \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}) \\ldots \\Pr(z_{2} | z_{1}) \\Pr(z_{1})\\\\\n\\end{align*}\\]product conditional probabilities states given previous states, probability initial states \\(\\Pr(z_1)\\). Using compact notation product conditional probabilities, get:\\[\\begin{align*}\n\\Pr(\\mathbf{z}) &= \\Pr(z_T, z_{T-1}, z_{T-2}, \\ldots, z_1) \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)}\\\\\n                &= \\Pr(z_T | z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}, \\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)\\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}) \\Pr(z_{T-2}, \\ldots, z_1)\\\\\n                &= \\ldots \\\\\n                &= \\Pr(z_T | z_{T-1}) \\Pr(z_{T-1} | z_{T-2}) \\ldots \\Pr(z_{2} | z_{1}) \\Pr(z_{1})\\\\\n                &= \\Pr(z_{1}) \\prod_{t=2}^T{\\Pr(z_{t} | z_{t-1})}\\\\\n\\end{align*}\\]product, can recognize transition parameters \\(\\gamma\\) defined , likelihood Markov model can written :\\[\\begin{align*}\n\\Pr(\\mathbf{z}) &= \\Pr(z_T, z_{T-1}, z_{T-2}, \\ldots, z_1) \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1) \\Pr(z_{T-2}, \\ldots, z_1)}\\\\\n                &= \\Pr(z_{1}) \\prod_{t=2}^T{\\gamma_{z_{t-1},z_{t}}}\\\\\n\\end{align*}\\]","code":""},{"path":"hmmcapturerecapture.html","id":"example","chapter":"3 Hidden Markov models","heading":"3.3.5 Example","text":"realise calculations bit difficult follow. Let’s take example fix ideas. Let’s assume animal alive, alive time 2 dies time 3. \\(\\mathbf{z} = (1, 1, 2)\\). contribution animal likelihood? Let’s apply formula just derived:\\[\\begin{align*}\n\\Pr(\\mathbf{z} = (1, 1, 2)) &= \\Pr(z_1 = 1) \\; \\gamma_{z_{1} = 1, z_{2} = 1} \\; \\gamma_{z_{2} = 1, z_{3} = 2}\\\\\n                            &= 1 \\; \\phi \\; (1 - \\phi).\n\\end{align*}\\]probability sequence alive, alive dead probability alive first, stay alive, eventually die. probability alive first occasion 1, contribution individual likelihood \\(\\phi (1 - \\phi)\\).","code":""},{"path":"hmmcapturerecapture.html","id":"bayesian-formulation","chapter":"3 Hidden Markov models","heading":"3.4 Bayesian formulation","text":"Now likelihood Markov model, can complement prior survival apply Bayes theorem.implementing model NIMBLE, note likelihood product conditional probabilities binary events (alive dead) drawn Bernoulli distributions, generality, extension categorical distributions. SMOOTH EXPLAIN CATEGORICAL DISTRIBUTIONS. MENTION MULTINOMIAL ONE TRIAL.categorical distribution multinomial distribution single draw.https://en.wikipedia.org/wiki/Categorical_distributionThe categorical distribution generalization Bernoulli distribution categorical random variable, .e. discrete variable two possible outcomes, roll dice. hand, categorical distribution special case multinomial distribution, gives probabilities potential outcomes single drawing rather multiple drawings.Initial state categorical probability \\(\\delta\\). dice two faces, coin, probability alive, one minus probability dead. course, want Markov chain start, ’d better say ’s alive delta just \\((1,0)\\):\\[\\begin{align*}\n   z_1 &\\sim \\text{Categorical}(\\delta) &\\text{[likelihood, }t = 1 \\text{]}\\\\\n\\end{align*}\\]Now main part dynamic states. state \\(t\\) depends state \\(t-1\\), categorical random variable. probabilities given rows transition matrix:\\[\\begin{align*}\n   z_1 &\\sim \\text{Categorical}(\\delta) &\\text{[likelihood, }t = 1 \\text{]}\\\\\n   z_t | z_{t-1} &\\sim \\text{Categorical}(\\gamma_{z_{t-1},z_{t}}) &\\text{[likelihood, }t > 1 \\text{]}\\\\\n\\end{align*}\\]also need prior survival. usual take uniform distribution 0 1, Beta distribution parameters 1 1. Overall model :\\[\\begin{align*}\n   z_1 &\\sim \\text{Categorical}(\\delta) &\\text{[likelihood, }t = 1 \\text{]}\\\\\n   z_t | z_{t-1} &\\sim \\text{Categorical}(\\gamma_{z_{t-1},z_{t}}) &\\text{[likelihood, }t > 1 \\text{]}\\\\\n  \\phi &\\sim \\text{Beta}(1, 1) &\\text{[prior }\\phi \\text{]} \\\\\n\\end{align*}\\]\\(z\\) \\(t-1\\) alive, first row \\(\\mathbf{\\Gamma}\\),\\[\\begin{align*}\n\\mathbf{\\Gamma} =\n\\left(\\begin{array}{cc}\n\\color{blue}{\\phi} & \\color{blue}{1 - \\phi}\\\\\n0 & 1\n\\end{array}\\right)\n\\end{align*}\\]\\(\\color{blue}{\\gamma_{z_{t-1} = 1,z_{t}} = (\\phi, 1-\\phi)}\\).Otherwise, \\(z\\) \\(t-1\\) dead 2, second row \\(\\mathbf{\\Gamma}\\):\\[\\begin{align*}\n\\mathbf{\\Gamma} =\n\\left(\\begin{array}{cc}\n\\phi & 1 - \\phi\\\\\n\\color{blue}{0} & \\color{blue}{1}\n\\end{array}\\right)\n\\end{align*}\\]dead remain dead probability equals 1, \\(\\color{blue}{\\gamma_{z_{t-1} = 2,z_{t}} = (0, 1)}\\).","code":"\nnimble::rcat(n = 20, prob = c(0.1, 0.3, 0.6))\n##  [1] 3 3 3 3 1 3 3 2 3 3 2 3 3 2 3 1 2 3 2 3\nnimble::rcat(n = 20, prob = c(0.1, 0.1, 0.4, 0.2, 0.2))\n##  [1] 2 5 3 5 2 3 1 4 3 4 3 4 3 3 4 5 3 3 4 1"},{"path":"hmmcapturerecapture.html","id":"nimble-implementation","chapter":"3 Hidden Markov models","heading":"3.5 Nimble implementation","text":"Introduce loops. First time see book. Maybe single individual first, embed time loop individual loop. Nimble, use categorical distribution dcat(). Nimble code:Vector \\(\\delta\\) used placeholder complex models come. , write z[,1] <- 1.SHOW CODEConstants data:Need comment constants, backward reference NIMBLE chapter relevant section. Initial values:Parameters monitor:MCMC details:Run Nimble:Posterior distribution survival:Posterior mean median close \\(0.8\\). Cool! data simulated, (true) survival \\(\\phi = 0.8\\).RELEASE SIMULATION CODE.Note also dcat everywhere replaced dbern. Different sampler? Dcat cool allows two outcomes, forward reference next chapters.","code":"\nmarkov.survival <- nimbleCode({\n  phi ~ dunif(0, 1) # prior\n  gamma[1,1] <- phi      # Pr(alive t -> alive t+1)\n  gamma[1,2] <- 1 - phi  # Pr(alive t -> dead t+1)\n  gamma[2,1] <- 0        # Pr(dead t -> alive t+1)\n  gamma[2,2] <- 1        # Pr(dead t -> dead t+1)\n  delta[1] <- 1          # Pr(alive t = 1) = 1\n  delta[2] <- 0          # Pr(dead t = 1) = 0\n  # likelihood\n  for (i in 1:N){\n    z[i,1] ~ dcat(delta[1:2])\n    for (j in 2:T){\n      z[i,j] ~ dcat(gamma[z[i,j-1], 1:2])\n    }\n  }})\nmy.constants <- list(N = 57, T = 5)\nmy.constants\n## $N\n## [1] 57\n## \n## $T\n## [1] 5\n\nmy.data <- list(z = z)\ninitial.values <- function() list(phi = runif(1,0,1))\ninitial.values()\n## $phi\n## [1] 0.7618\nparameters.to.save <- c(\"phi\")\nparameters.to.save\n## [1] \"phi\"\nn.iter <- 5000\nn.burnin <- 1000\nn.chains <- 2\nmcmc.output <- nimbleMCMC(code = markov.survival,\n                          constants = my.constants,\n                          data = my.data,\n                          inits = initial.values,\n                          monitors = parameters.to.save,\n                          niter = n.iter,\n                          nburnin = n.burnin,\n                          nchains = n.chains)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\nMCMCsummary(mcmc.output, round = 2)\n##     mean   sd 2.5%  50% 97.5% Rhat n.eff\n## phi 0.77 0.03  0.7 0.77  0.83    1  1699\nnind <- 57\nnocc <- 5\nfirst <- rep(1, nind) # single cohort\nz <- matrix(NA, nrow = nind, ncol = nocc)\nphi <- 0.8 # survival\nset.seed(2022) # set seed for reproducibility\nfor (i in 1:nind){ # loop over individual i\n  z[i,first[i]] <- 1 # alive at first capture\n  for (t in (first[i]+1):nocc){ # loop over time t\n    z[i,t] <- rbinom(1, 1, phi * z[i,t-1]) # Bernoulli draw\n  } # t\n} # i\nz[z==0] <- 2 # 2 = dead, 1 = alive\nhead(z) \n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    2    2    2    2\n## [2,]    1    1    1    1    1\n## [3,]    1    1    1    1    1\n## [4,]    1    1    1    1    1\n## [5,]    1    1    1    1    1\n## [6,]    1    1    1    2    2"},{"path":"hmmcapturerecapture.html","id":"hidden-markov-models","chapter":"3 Hidden Markov models","heading":"3.6 Hidden Markov models","text":"","code":""},{"path":"hmmcapturerecapture.html","id":"capture-recapture-data","chapter":"3 Hidden Markov models","heading":"3.6.1 Capture-recapture data","text":"Unfortunately, data wish . real life, animals monitored exhaustively, like humans medical trial. Animals captured, marked identified released alive. , animals may detected , go undetected — capture-recapture. Whenever animals go undetected, might alive missed, dead therefore detected — imperfect detection23. Whenever animals go undetected, might alive missed, dead therefore detected — imperfect detection. Markov process survival partially observed — hidden Markov models.truth \\(z\\):Unfortunately, partial access \\(z\\). observe \\(y\\) detections non-detections. \\(z\\) \\(y\\) connected?Dead animals go undetected. animal dead .e. \\(z = 2\\), detected, therefore \\(y = 0\\).Alive animals may detected . animal alive \\(z = 1\\), detected \\(y = 1\\) w/ prob \\(p\\) \\(y = 0\\) w/ prob \\(1-p\\). first detection, know nothing, proceed conditional .Compare previous table. 1s become 0s. table \\(y\\) observe real life. make connection observations, \\(y\\), true states, \\(z\\). need describe observations made states","code":""},{"path":"hmmcapturerecapture.html","id":"observation-matrix","chapter":"3 Hidden Markov models","heading":"3.6.2 Observation matrix","text":"observation probabilities can packed observation matrix \\(\\mathbf{\\Omega}\\). rows: states alive \\(z = 1\\) dead \\(z = 2\\). columns: observations non-detected \\(y = 1\\) detected \\(y = 2\\) (previously coded 0 1 respectively).\\[\\begin{align*}\n\\mathbf{\\Omega} =\n\\left(\\begin{array}{cc}\n\\omega_{1,1} & \\omega_{1,2}\\\\\n\\omega_{2,1} & \\omega_{2,2}\n\\end{array}\\right) =\n\\left(\\begin{array}{cc}\n1 - p & p\\\\\n1 & 0\n\\end{array}\\right)\n\\end{align*}\\]Observation matrix:\\[\n\\begin{matrix}\n& \\\\\n\\mathbf{\\Omega} =\n    \\left ( \\vphantom{ \\begin{matrix} 12 \\\\ 12 \\end{matrix} } \\right .\n\\end{matrix}\n\\hspace{-1.2em}\n\\begin{matrix}\n    y_t=1 & y_t=2 \\\\ \\hdashline\n1 - p & p\\\\\n1 & 0\\\\\n\\end{matrix}\n\\hspace{-0.2em}\n\\begin{matrix}\n& \\\\\n\\left . \\vphantom{ \\begin{matrix} 12 \\\\ 12 \\end{matrix} } \\right )\n    \\begin{matrix}\n    z_{t}=\\\\ z_{t}=D\n    \\end{matrix}\n\\end{matrix}\n\\]","code":""},{"path":"hmmcapturerecapture.html","id":"hidden-markov-model","chapter":"3 Hidden Markov models","heading":"3.6.3 Hidden Markov model","text":"Markov model:States \\(z\\) gray. Remember graphical representation Markov model. Hidden Markov model:States \\(z\\) gray. Observations \\(y\\) white. hidden Markov model just two time series. One states Markovian property. observations generated states. Run parallel.states (gray), \\(z = 1\\) alive, \\(z = 2\\) dead. observations (white), \\(y = 1\\) non-detected, \\(y = 2\\) detected. Now add states alive dead, 1 2s. observations, non-detected detected, 1 2s. parameters, \\(\\phi\\) transition 1 1. \\(p\\) probability \\(y\\) 2 detected given \\(z\\) 1 alive.","code":""},{"path":"hmmcapturerecapture.html","id":"likelihood-1","chapter":"3 Hidden Markov models","heading":"3.6.4 Likelihood","text":"likelihood, observed \\(y\\). Parameters \\(\\phi\\), \\(p\\) unobserved partially observed \\(z\\). Shall estimate latent states \\(z\\) ? Treat parameters?can get rid states, likelihood function \\(\\phi\\) \\(p\\) . function maximize Frequentist approach. Reference forward section (forward algorithm).Bayesian approach MCMC methods allows treating latent states parameters, estimated .Infering latent states \\(z\\) can useful estimate prevalence, e.g. animal epidemiology prevalence disease, evolutionary ecology sex ratio conservation biology prevalence hybrids.Estimating latent states costly though, required, marginalisation may speed computations. Actually, can estimate states afterwards (Viterbi).-called marginalisation Yackulic et al. (2020). reference forward section .neat thing Nimble provides marginalised models nimbleEcology, ’ll get back section blabla.","code":""},{"path":"hmmcapturerecapture.html","id":"fitting-hmm-with-nimble","chapter":"3 Hidden Markov models","heading":"3.7 Fitting HMM with NIMBLE","text":"model far:\\[\\begin{align*}\n   z_{\\text{first}} &\\sim \\text{Categorical}(1, \\delta) &\\text{[likelihood]}\\\\\n   z_t | z_{t-1} &\\sim \\text{Categorical}(1, \\gamma_{z_{t-1},z_{t}}) &\\text{[likelihood]}\\\\\n   y_t | z_{t} &\\sim \\text{Categorical}(1, \\omega_{z_{t}}) &\\text{[likelihood]}\\\\\n  \\phi &\\sim \\text{Beta}(1, 1) &\\text{[prior }\\phi \\text{]} \\\\\n  p &\\sim \\text{Beta}(1, 1) &\\text{[prior }p \\text{]} \\\\\n\\end{align*}\\]Now model observation layer \\(y\\)’s, conditional \\(z\\). need prior detection probability.implement model Nimble?Start priors:define initial states, transition observation matrices:likelihood:Overall, code looks like:Now constants:data made 0s non-detections 1s detections. use categorical distribution, need code 1, 2, etc. Value 0 accepted. Add 1 get correct format \\(y=1\\) non-detection \\(y = 2\\) detection:Initial values:Parameters monitor:MCMC details:Run Nimble:Posterior distribution survival:data simulated, true survival \\(\\phi = 0.8\\) detection \\(p = 0.6\\).Show simulation code. simulations, replace dbinom dcat coherence.","code":"hmm.survival <- nimbleCode({\n  phi ~ dunif(0, 1) # prior survival\n  p ~ dunif(0, 1) # prior detection\n...\n...\n  # parameters\n  gamma[1,1] <- phi      # Pr(alive t -> alive t+1)\n  gamma[1,2] <- 1 - phi  # Pr(alive t -> dead t+1)\n  gamma[2,1] <- 0        # Pr(dead t -> alive t+1)\n  gamma[2,2] <- 1        # Pr(dead t -> dead t+1)\n  delta[1] <- 1          # Pr(alive t = 1) = 1\n  delta[2] <- 0          # Pr(dead t = 1) = 0\n  omega[1,1] <- 1 - p    # Pr(alive t -> non-detected t)\n  omega[1,2] <- p        # Pr(alive t -> detected t)\n  omega[2,1] <- 1        # Pr(dead t -> non-detected t)\n  omega[2,2] <- 0        # Pr(dead t -> detected t)\n......\n    # likelihood\n    for (i in 1:N){\n    z[i,first[i]] ~ dcat(delta[1:2])\n    for (j in (first[i]+1):T){\n      z[i,j] ~ dcat(gamma[z[i,j-1], 1:2])\n      y[i,j] ~ dcat(omega[z[i,j], 1:2])\n    }\n  }\n})\nhmm.survival <- nimbleCode({\n  phi ~ dunif(0, 1) # prior survival\n  p ~ dunif(0, 1) # prior detection\n  # likelihood\n  gamma[1,1] <- phi      # Pr(alive t -> alive t+1)\n  gamma[1,2] <- 1 - phi  # Pr(alive t -> dead t+1)\n  gamma[2,1] <- 0        # Pr(dead t -> alive t+1)\n  gamma[2,2] <- 1        # Pr(dead t -> dead t+1)\n  delta[1] <- 1          # Pr(alive t = 1) = 1\n  delta[2] <- 0          # Pr(dead t = 1) = 0\n  omega[1,1] <- 1 - p    # Pr(alive t -> non-detected t)\n  omega[1,2] <- p        # Pr(alive t -> detected t)\n  omega[2,1] <- 1        # Pr(dead t -> non-detected t)\n  omega[2,2] <- 0        # Pr(dead t -> detected t)\n  for (i in 1:N){\n    z[i,first[i]] ~ dcat(delta[1:2])\n    for (j in (first[i]+1):T){\n      z[i,j] ~ dcat(gamma[z[i,j-1], 1:2])\n      y[i,j] ~ dcat(omega[z[i,j], 1:2])\n    }\n  }\n})\nfirst <- apply(y, 1, function(x) min(which(x !=0)))\nmy.constants <- list(N = nrow(y), T = 5, first = first)\nmy.constants\n## $N\n## [1] 46\n## \n## $T\n## [1] 5\n## \n## $first\n##  [1] 2 1 1 1 2 1 1 1 1 1 1 1 2 1 2 1 1 5 1 1 1 1 1 3 1 2 1 1\n## [29] 1 1 1 1 2 2 1 1 2 1 5 1 1 1 2 1 1 1\nmy.data <- list(y = y + 1)\nzinits <- y + 1 # non-detection -> alive\nzinits[zinits == 2] <- 1 # dead -> alive\ninitial.values <- function() list(phi = runif(1,0,1),\n                                  p = runif(1,0,1),\n                                  z = zinits)\nparameters.to.save <- c(\"phi\", \"p\")\nparameters.to.save\n## [1] \"phi\" \"p\"\nn.iter <- 5000\nn.burnin <- 1000\nn.chains <- 2\nmcmc.output <- nimbleMCMC(code = hmm.survival,\n                          constants = my.constants,\n                          data = my.data,\n                          inits = initial.values,\n                          monitors = parameters.to.save,\n                          niter = n.iter,\n                          nburnin = n.burnin,\n                          nchains = n.chains)\nMCMCsummary(mcmc.output, round = 2)\n##     mean   sd 2.5%  50% 97.5% Rhat n.eff\n## p   0.55 0.07 0.40 0.56  0.69 1.02   369\n## phi 0.76 0.06 0.65 0.76  0.88 1.02   431"},{"path":"hmmcapturerecapture.html","id":"marginalization","chapter":"3 Hidden Markov models","heading":"3.8 Marginalization","text":"Faire lien avec forward algorithm. Reprendre dHMM en la simplifiant au max et en faisant le lien avec l’algo. Match notation.","code":""},{"path":"hmmcapturerecapture.html","id":"theory","chapter":"3 Hidden Markov models","heading":"3.8.1 Theory","text":"Using formula total probability, likelihood Markov chain:\\[\\begin{align*}\n\\Pr(\\mathbf{y}) &= \\Pr(y_1, y_{2}, \\ldots, y_T)\\\\\n                &= \\sum_{z_1} \\cdots \\sum_{z_T} \\Pr(y_1, y_{2}, \\ldots, y_T | z_1, z_{2}, \\ldots, z_T) \\Pr(z_1, z_{2}, \\ldots, z_T)\\\\\n                &= \\sum_{z_1} \\cdots \\sum_{z_T} \\left(\\prod_{t=1}^T{\\omega_{z_{t}, y_t}}\\right) \\left(\\Pr(z_{1}) \\prod_{t=2}^T{\\gamma_{z_{t-1},z_{t}}}\\right)\\\\\n\\end{align*}\\]likelihood HMM. thing don’t know states. go possibilities, sum possible states. Hence sums . term likelihood Markov chain, saw . component elements observation matrix. likelihood matrix formulation can useful. delta, initial states, observation, transitions, . vector ones end get sum terms.","code":""},{"path":"hmmcapturerecapture.html","id":"example-1","chapter":"3 Hidden Markov models","heading":"3.8.2 Example","text":"Let assume animal detected, missed. \\(\\mathbf{y} = (2, 1)\\). contribution animal likelihood?\\[\\begin{align*}\n\\Pr(\\mathbf{y} = (2, 1)) &= \\sum_{z_1 = 1}^2 \\; \\sum_{z_2 = 1}^2 w_{z_1, y_1 = 2} w_{z_2, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2} \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1, z_1, z_1, z_1)}\\\\\n\\end{align*}\\]Let assume animal detected, missed. \\(\\mathbf{y} = (2, 1)\\). contribution animal likelihood?\\[\\begin{align*}\n\\Pr(\\mathbf{y} = (2, 1)) &= \\sum_{z_1 = 1}^2 \\; \\sum_{z_2 = 1}^2 w_{z_1, y_1 = 2} w_{z_2, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2} \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1, z_1, z_1, z_1)}\\\\\n&= \\sum_{z_1 = 1}^2 \\left( w_{z_1, y_1 = 2} w_{z_2 = 1, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2 = 1} + w_{z_1, y_1 = 2} w_{z_2 = 2, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2 = 2} \\right) \\\\\n\\end{align*}\\]Let assume animal detected, missed. \\(\\mathbf{y} = (2, 1)\\). contribution animal likelihood?\\[\\begin{align*}\n\\Pr(\\mathbf{y} = (2, 1)) &= \\sum_{z_1 = 1}^2 \\; \\sum_{z_2 = 1}^2 w_{z_1, y_1 = 2} w_{z_2, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2} \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1, z_1, z_1, z_1)}\\\\\n&= \\sum_{z_1 = 1}^2 \\left( w_{z_1, y_1 = 2} w_{z_2 = 1, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2 = 1} + w_{z_1, y_1 = 2} w_{z_2 = 2, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2 = 2} \\right) \\\\\n&= w_{z_1 = 1, y_1 = 2} w_{z_2 = 1, y_2 = 1}\\delta_1 \\gamma_{z_1 = 1, z_2 = 1} + w_{z_1 = 1, y_1 = 2} w_{z_2 = 2, y_2 = 1} \\delta_1 \\gamma_{z_1 = 1, z_2 = 2}\n\\end{align*}\\]Note: \\(\\Pr(z_1 = 1) = \\delta_1 = 1\\) \\(\\Pr(z_1 = 2) = 0\\).Let assume animal detected, missed. \\(\\mathbf{y} = (2, 1)\\). contribution animal likelihood?\\[\\begin{align*}\n\\Pr(\\mathbf{y} = (2, 1)) &= \\sum_{z_1 = 1}^2 \\; \\sum_{z_2 = 1}^2 w_{z_1, y_1 = 2} w_{z_2, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2} \\color{white}{\\Pr(z_{T-1}, z_{T-2},\\ldots, z_1, z_1, z_1, z_1)}\\\\\n&= \\sum_{z_1 = 1}^2 \\left( w_{z_1, y_1 = 2} w_{z_2 = 1, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2 = 1} + w_{z_1, y_1 = 2} w_{z_2 = 2, y_2 = 1} \\Pr(z_1) \\gamma_{z_1, z_2 = 2} \\right) \\\\\n&= w_{z_1 = 1, y_1 = 2} w_{z_2 = 1, y_2 = 1} \\delta_1 \\gamma_{z_1 = 1, z_2 = 1} + w_{z_1 = 1, y_1 = 2} w_{z_2 = 2, y_2 = 1} \\delta_1 \\gamma_{z_1 = 1, z_2 = 2}\\\\\n&= (1 - p) \\phi + (1-\\phi)\n\\end{align*}\\]Note: \\(w_{z_1 = 1, y_1 = 2} = \\Pr(y_1 = 2 | z_1 = 1) = 1\\) condition first capture.","code":""},{"path":"hmmcapturerecapture.html","id":"implementation-in-nimble","chapter":"3 Hidden Markov models","heading":"3.8.3 Implementation in NIMBLE","text":"Introduce NimbleEcology.Get occasion first capture individual:filter individuals first captured last occasion. individuals contribute parameter estimation, also cause problems nimbleEcology.Model code:Rest :Computer number nodes. Show z longer .","code":"\nlibrary(nimbleEcology)\nfirst <- apply(y, 1, function(x) min(which(x !=0)))\nmask <- which(first!=ncol(y)) # individuals that are not first encountered at last occasion\ny <- y[mask, ]                # keep only these\nfirst <- first[mask]\nhmm.survival.new <- nimbleCode({\n  phi ~ dunif(0, 1) # prior survival\n  p ~ dunif(0, 1) # prior detection\n  # likelihood\n  gamma[1,1] <- phi      # Pr(alive t -> alive t+1)\n  gamma[1,2] <- 1 - phi  # Pr(alive t -> dead t+1)\n  gamma[2,1] <- 0        # Pr(dead t -> alive t+1)\n  gamma[2,2] <- 1        # Pr(dead t -> dead t+1)\n  delta[1] <- 1          # Pr(alive t = 1) = 1\n  delta[2] <- 0          # Pr(dead t = 1) = 0\n  omega[1,1] <- 1 - p    # Pr(alive t -> non-detected t)\n  omega[1,2] <- p        # Pr(alive t -> detected t)\n  omega[2,1] <- 1        # Pr(dead t -> non-detected t)\n  omega[2,2] <- 0        # Pr(dead t -> detected t)\n  for(i in 1:N) {\n    init[i, 1:2] <- gamma[y[i, first[i] ] - 1, 1:2] # First state propagation\n  }\n  for (i in 1:N){\n    y[i,(first[i]+1):T] ~ dHMM(init = init[i,1:2], \n                               probObs = omega[1:2,1:2], # observation matrix\n                               probTrans = gamma[1:2,1:2], # transition matrix\n                               len = T - first[i], # nb of sampling occasions\n                               checkRowSums = 1) # do not check whether elements in a row sum to 1\n  }\n})\n# Data and constants:\nmy.data <- list(y = y + 1)\nmy.constants <- list(N = nrow(y), T = ncol(y), first = first)\n\n# Initial values:\nzinits <- y + 1 # non-detection -> alive\nzinits[zinits == 2] <- 1 # dead -> alive\ninitial.values <- function() list(phi = runif(1,0,1),\n                                  p = runif(1,0,1))\n\n# Parameters to monitor:\nparameters.to.save <- c(\"phi\", \"p\")\nparameters.to.save\n## [1] \"phi\" \"p\"\n\n# MCMC details:\nn.iter <- 5000\nn.burnin <- 1000\nn.chains <- 2\n\n# Run NIMBLE:\nmcmc.output <- nimbleMCMC(code = hmm.survival.new,\n                          constants = my.constants,\n                          data = my.data,\n                          inits = initial.values,\n                          monitors = parameters.to.save,\n                          niter = n.iter,\n                          nburnin = n.burnin,\n                          nchains = n.chains)\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n## |-------------|-------------|-------------|-------------|\n## |-------------------------------------------------------|\n\n# Numerical summaries:\nMCMCsummary(mcmc.output, round = 2)\n##     mean   sd 2.5%  50% 97.5% Rhat n.eff\n## p   0.55 0.07 0.40 0.55  0.69    1  1016\n## phi 0.76 0.06 0.65 0.76  0.87    1   984"},{"path":"hmmcapturerecapture.html","id":"pooled-encounter-histories","chapter":"3 Hidden Markov models","heading":"3.9 Pooled encounter histories","text":"section, ’re gonna use NIMBLE functions express likelihood using pooled encounter histories. use vector mult contains number individuals particular encounter history. hacked dHMM nimbleEcology function . Courtesy Chloé Nater. Implement Turek et al. Model code:XX individuals detected , XX individuals detected …Get occasion first capture history:Filter individuals first captured last occasion.Apply filter occasion first capture sample size.Rest :won’t work. need rHMMweighted.need rHMMweighted well.Something doesn’t work. found fix workshop, can’t make work . Try simplify fn first, make sense rHMM. resume.","code":"\ndHMMweighted <- nimbleFunction(\n  run = function (x = double(1), \n                  init = double(1), \n                  probObs = double(2),\n                  probTrans = double(2), \n                  len = double(0),\n                  mult = double(0), # NEWLY ADDED: argument stating number of occurrences \n                                    # of same encounter history in entire dataset \n                  checkRowSums = integer(0, default = 0),  \n                  log = integer(0, default = 0)) \n  {\n    if (length(x) != len) \n      nimStop(\"In dHMM: Argument len must be length of x or 0.\")\n    if (nimDim(probObs)[1] != nimDim(probTrans)[1]) \n      nimStop(\"In dHMM: Length of dimension 1 in probObs must equal length of dimension 1 in probTrans.\")\n    if (nimDim(probTrans)[1] != nimDim(probTrans)[2]) \n      nimStop(\"In dHMM: probTrans must be a square matrix.\")\n    ## There was a strict test for sum(init) == 1.  This could be true in R and false in C++!\n    if (abs(sum(init) - 1) > 1e-06) \n      nimStop(\"In dHMM: Initial probabilities must sum to 1.\")\n    if (checkRowSums) {\n      transCheckPasses <- TRUE\n      for (i in 1:nimDim(probTrans)[1]) {\n        thisCheckSum <- sum(probTrans[i, ])\n        if (abs(thisCheckSum - 1) > 1e-06) {\n          nimPrint(\"In dHMM: Problem with sum(probTrans[i,]) with i = \", \n                   i, \". The sum should be 1 but is \", thisCheckSum)\n          transCheckPasses <- FALSE\n        }\n      }\n      obsCheckPasses <- TRUE\n      for (i in 1:nimDim(probObs)[1]) {\n        thisCheckSum <- sum(probObs[i, ])\n        if (abs(thisCheckSum - 1) > 1e-06) {\n          nimPrint(\"In dHMM: Problem with sum(probObs[i,]) with i = \", \n                   i, \". The sum should be 1 but is \", thisCheckSum)\n          obsCheckPasses <- FALSE\n        }\n      }\n      if (!(transCheckPasses | obsCheckPasses)) \n        nimStop(\"In dHMM: probTrans and probObs were not specified correctly.  Probabilities in each row (second dimension) must sum to 1.\")\n      if (!transCheckPasses) \n        nimStop(\"In dHMM: probTrans was not specified correctly.  Probabilities in each row (second dimension) must sum to 1.\")\n      if (!obsCheckPasses) \n        nimStop(\"In dHMM: probObs was not specified correctly. Probabilities in each row must sum to 1.\")\n    }\n    pi <- init\n    logL <- 0\n    nObsClasses <- nimDim(probObs)[2]\n    for (t in 1:len) {\n      if (x[t] > nObsClasses | x[t] < 1) \n        nimStop(\"In dHMM: Invalid value of x[t].\")\n      Zpi <- probObs[, x[t]] * pi\n      sumZpi <- sum(Zpi)\n      logL <- logL + log(sumZpi) * mult # NEWLY ADDED\n      if (t != len) \n        pi <- ((Zpi %*% probTrans)/sumZpi)[1, ]\n    }\n    if (log) \n      return(logL)\n    return(exp(logL))\n    returnType(double())\n  })\nhmm.survival.weighted <- nimbleCode({\n  phi ~ dunif(0, 1) # prior survival\n  p ~ dunif(0, 1) # prior detection\n  # likelihood\n  gamma[1,1] <- phi      # Pr(alive t -> alive t+1)\n  gamma[1,2] <- 1 - phi  # Pr(alive t -> dead t+1)\n  gamma[2,1] <- 0        # Pr(dead t -> alive t+1)\n  gamma[2,2] <- 1        # Pr(dead t -> dead t+1)\n  delta[1] <- 1          # Pr(alive t = 1) = 1\n  delta[2] <- 0          # Pr(dead t = 1) = 0\n  omega[1,1] <- 1 - p    # Pr(alive t -> non-detected t)\n  omega[1,2] <- p        # Pr(alive t -> detected t)\n  omega[2,1] <- 1        # Pr(dead t -> non-detected t)\n  omega[2,2] <- 0        # Pr(dead t -> detected t)\n  for(i in 1:N) {\n    init[i, 1:2] <- gamma[y[i, first[i] ] - 1, 1:2] # First state propagation\n  }\n  for (i in 1:N){\n    y[i,(first[i]+1):T] ~ dHMMweighted(init = init[i,1:2], \n                                       mult = mult[i],\n                                       probObs = omega[1:2,1:2], # observation matrix\n                                       probTrans = gamma[1:2,1:2], # transition matrix\n                                       len = T - first[i], # nb of sampling occasions\n                                       checkRowSums = 1) # do not check whether elements in a row sum to 1\n  }\n})\nset.seed(2022)\np <- 0.6\ny <- z\ny[z==2] <- 0\ny[y==1] <- rbinom(n = sum(y==1), 1, p)\nnobs <- sum(apply(y,1,sum) != 0)\ny <- y[apply(y,1,sum) !=0, ]\nfirst <- apply(y, 1, function(x) min(which(x !=0)))\nfor (i in 1:nobs){\n  if(first[i] > 1) y[i, 1:(first[i]-1)] <- NA\n}\ny_weighted <- y %>% \n  as_tibble() %>% \n  group_by_all() %>% \n  summarise(mult = n()) %>% \n  relocate(mult) %>% \n  as.matrix()\nhead(y_weighted)\n##      mult winter 1 winter 2 winter 3 winter 4 winter 5\n## [1,]    9        1        0        0        0        0\n## [2,]    1        1        0        0        1        0\n## [3,]    1        1        0        0        1        1\n## [4,]    2        1        0        1        0        0\n## [5,]    2        1        0        1        1        0\n## [6,]    8        1        1        0        0        0\nmult <- y_weighted[,1] # nb of individuals w/ a particular encounter history\ny <- y_weighted[,-1] # pooled data\nget.first <- function(x) min(which(x != 0))\nfirst <- apply(y, 1, get.first)\nmask <- which(first!=ncol(y))\ny <- y[mask, ]\nfirst <- first[mask]\nmult <- mult[mask]\n# Data and constants:\nmy.data <- list(y = y + 1)\nmy.constants <- list(N = nrow(y), T = ncol(y), first = first, mult = mult)\n\n# Initial values:\nzinits <- y + 1 # non-detection -> alive\nzinits[zinits == 2] <- 1 # dead -> alive\ninitial.values <- function() list(phi = runif(1,0,1),\n                                  p = runif(1,0,1))\n\n# Parameters to monitor:\nparameters.to.save <- c(\"phi\", \"p\")\nparameters.to.save\n## [1] \"phi\" \"p\"\n\n# MCMC details:\nn.iter <- 5000\nn.burnin <- 1000\nn.chains <- 2\n# Run NIMBLE:\nmcmc.output <- nimbleMCMC(code = hmm.survival.weighted,\n                          constants = my.constants,\n                          data = my.data,\n                          inits = initial.values,\n                          monitors = parameters.to.save,\n                          niter = n.iter,\n                          nburnin = n.burnin,\n                          nchains = n.chains)\nrHMMweighted <- nimbleFunction(\n  run = function(n = integer(),    ## Observed capture (state) history\n                 init = double(1),\n                 probObs = double(2),\n                 probTrans = double(2),\n                 len = double(0),\n                 mult = double(0),\n                 checkRowSums = double(0, default = 1)) {\n    returnType(double(1))\n    if (dim(probObs)[1] != dim(probTrans)[1]) stop(\"In rHMM: Number of cols in probObs must equal number of cols in probTrans.\")\n    if (dim(probTrans)[1] != dim(probTrans)[2]) stop(\"In rHMM: probTrans must be a square matrix.\")\n    if (abs(sum(init) - 1) > 1e-06) stop(\"In rHMM: Initial probabilities must sum to 1.\")\n    if (checkRowSums) {\n      transCheckPasses <- TRUE\n      for (i in 1:dim(probTrans)[1]) {\n        thisCheckSum <- sum(probTrans[i,])\n        if (abs(thisCheckSum - 1) > 1e-6) {\n          ## Compilation doesn't support more than a simple string for stop()\n          ## so we provide more detail using a print().\n          print(\"In rHMM: Problem with sum(probTrans[i,]) with i = \", i, \". The sum should be 1 but is \", thisCheckSum)\n          transCheckPasses <- FALSE\n        }\n      }\n      obsCheckPasses <- TRUE\n      for (i in 1:dim(probObs)[1]) {\n        thisCheckSum <- sum(probObs[i,])\n        if (abs(thisCheckSum - 1) > 1e-6) {\n          print(\"In rHMM: Problem with sum(probObs[i,]) with i = \", i, \". The sum should be 1 but is \", thisCheckSum)\n          obsCheckPasses <- FALSE\n        }\n      }\n      if(!(transCheckPasses | obsCheckPasses))\n        stop(\"In rHMM: probTrans and probObs were not specified correctly.  Probabilities in each row (second dimension) must sum to 1.\")\n      if(!transCheckPasses)\n        stop(\"In rHMM: probTrans was not specified correctly.  Probabilities in each row (second dimension) must sum to 1.\")\n      if(!obsCheckPasses)\n        stop(\"In rHMM: probObs was not specified correctly. Probabilities in each row must sum to 1.\")\n    }\n    ans <- numeric(len)\n    probInit <- init\n    trueInit <- 0\n    r <- runif(1, 0, 1)\n    j <- 1\n    while (r > sum(probInit[1:j])) j <- j + 1\n    trueInit <- j\n    trueState <- trueInit\n    for (i in 1:len) {\n      # Transition to a new true state\n      r <- runif(1, 0, 1)\n      j <- 1\n      while (r > sum(probTrans[trueState, 1:j])) j <- j + 1\n      trueState <- j\n      # Detect based on the true state\n      r <- runif(1, 0, 1)\n      j <- 1\n      while (r > sum(probObs[trueState, 1:j])) j <- j + 1\n      ans[i] <- j\n    }\n    return(ans)\n  })\n# Run NIMBLE:\nmcmc.output <- nimbleMCMC(code = hmm.survival.weighted,\n                          constants = my.constants,\n                          data = my.data,\n                          inits = initial.values,\n                          monitors = parameters.to.save,\n                          niter = n.iter,\n                          nburnin = n.burnin,\n                          nchains = n.chains)\n\n# Numerical summaries:\nMCMCsummary(mcmc.output, round = 2)"},{"path":"hmmcapturerecapture.html","id":"summary-2","chapter":"3 Hidden Markov models","heading":"3.10 Summary","text":"Blabla.Blabla.Blabla.Blabla.Recall 3 problems HMM?Recall 3 problems HMM?","code":""},{"path":"hmmcapturerecapture.html","id":"suggested-reading-2","chapter":"3 Hidden Markov models","heading":"3.11 Suggested reading","text":"Zucchini, MacDonald Langrock (2016) Hidden Markov Models Time Series: Introduction Using R (2nd ed). Chapman Hall/CRC.Zucchini, MacDonald Langrock (2016) Hidden Markov Models Time Series: Introduction Using R (2nd ed). Chapman Hall/CRC.McClintock, B.T., Langrock, R., Gimenez, O., Cam, E., Borchers, D.L., Glennie, R. Patterson, T.. (2020), Uncovering ecological state dynamics hidden Markov models. Ecology Letters, 23: 1878-1903.McClintock, B.T., Langrock, R., Gimenez, O., Cam, E., Borchers, D.L., Glennie, R. Patterson, T.. (2020), Uncovering ecological state dynamics hidden Markov models. Ecology Letters, 23: 1878-1903.Yackulic, C. B. Dodrill, M., Dzul, M., Sanderlin, J. S., Reid, J. .. (2020). need speed Bayesian population models: practical guide marginalizing recovering discrete latent states. Ecological Applications 30:e02112.Yackulic, C. B. Dodrill, M., Dzul, M., Sanderlin, J. S., Reid, J. .. (2020). need speed Bayesian population models: practical guide marginalizing recovering discrete latent states. Ecological Applications 30:e02112.L. R. Rabiner (1989). tutorial hidden Markov models selected applications speech recognition. Proceedings IEEE, 77:257-286.L. R. Rabiner (1989). tutorial hidden Markov models selected applications speech recognition. Proceedings IEEE, 77:257-286.","code":""},{"path":"introduction-4.html","id":"introduction-4","chapter":"Introduction","heading":"Introduction","text":"","code":""},{"path":"survival.html","id":"survival","chapter":"4 Survival","heading":"4 Survival","text":"–>\n –>–>–>–>–>\n –>\n –>–>–>\n –>\n –>\n –>","code":""},{"path":"covariates.html","id":"covariates","chapter":"5 Covariates","heading":"5 Covariates","text":"","code":""},{"path":"dispersal.html","id":"dispersal","chapter":"6 Dispersal","heading":"6 Dispersal","text":"","code":""},{"path":"model-selection.html","id":"model-selection","chapter":"7 Model selection and validation","heading":"7 Model selection and validation","text":"","code":""},{"path":"introduction-5.html","id":"introduction-5","chapter":"Introduction","heading":"Introduction","text":"","code":""},{"path":"uncertainty.html","id":"uncertainty","chapter":"8 State uncertainty","heading":"8 State uncertainty","text":"","code":""},{"path":"hsmm.html","id":"hsmm","chapter":"9 Hidden semi-Markov models","heading":"9 Hidden semi-Markov models","text":"","code":""},{"path":"introduction-6.html","id":"introduction-6","chapter":"Introduction","heading":"Introduction","text":"","code":""},{"path":"tradeoffs.html","id":"tradeoffs","chapter":"10 Life history theory","heading":"10 Life history theory","text":"","code":""},{"path":"tradeoffs.html","id":"tradeoffs-1","chapter":"10 Life history theory","heading":"10.1 Tradeoffs","text":"Morano et al. (2013), Shefferson et al. (2003), Cruz-Flores et al. (n.d.)","code":""},{"path":"tradeoffs.html","id":"breeding-dynamics","chapter":"10 Life history theory","heading":"10.2 Breeding dynamics","text":"Pradel, Choquet, Béchet (2012), Desprez et al. (2011), Desprez et al. (2013), Pacoureau et al. (2019)","code":""},{"path":"tradeoffs.html","id":"actuarial-senescence","chapter":"10 Life history theory","heading":"10.3 Actuarial senescence","text":"Choquet et al. (2011), Péron et al. (2016)","code":""},{"path":"tradeoffs.html","id":"cause-specific-mortalities","chapter":"10 Life history theory","heading":"10.4 Cause-specific mortalities","text":"Fernández-Chacón et al. (2016) Ruette et al. (2015)","code":""},{"path":"tradeoffs.html","id":"disease-dynamics","chapter":"10 Life history theory","heading":"10.5 Disease dynamics","text":"Marescot et al. (2018) Santoro et al. (2014)","code":""},{"path":"tradeoffs.html","id":"sex-uncertainty","chapter":"10 Life history theory","heading":"10.6 Sex uncertainty","text":"Pradel et al. (2008) Genovart, Pradel, Oro (2012)","code":""},{"path":"abundance.html","id":"abundance","chapter":"11 Abundance","heading":"11 Abundance","text":"","code":""},{"path":"abundance.html","id":"horvitz-thompson","chapter":"11 Abundance","heading":"11.1 Horvitz-Thompson","text":"Santostasi et al. (2019)","code":""},{"path":"abundance.html","id":"jolly-seber","chapter":"11 Abundance","heading":"11.2 Jolly-Seber","text":"","code":""},{"path":"abundance.html","id":"robust-design","chapter":"11 Abundance","heading":"11.3 Robust design","text":"Karamanlidis et al. (2015), Santostasi et al. (2016), Gibson et al. (2018), Rankin et al. (2016)","code":""},{"path":"stopover.html","id":"stopover","chapter":"12 Stopover duration","heading":"12 Stopover duration","text":"Guérin et al. (2017)","code":""},{"path":"individual-dependence.html","id":"individual-dependence","chapter":"13 Individual dependence","heading":"13 Individual dependence","text":"","code":""},{"path":"individual-dependence.html","id":"dependence-among-individuals","chapter":"13 Individual dependence","heading":"13.1 Dependence among individuals","text":"Culina et al. (2013) Cubaynes et al. (2021)","code":""},{"path":"individual-dependence.html","id":"individual-heterogeneity","chapter":"13 Individual dependence","heading":"13.2 Individual heterogeneity","text":"Cubaynes et al. (2010), Gimenez Choquet (2010), Turek, Wehrhahn, Gimenez (2021)","code":""},{"path":"take-home-messages.html","id":"take-home-messages","chapter":"Take-home messages","heading":"Take-home messages","text":"–>\n –>–>–>–>","code":""},{"path":"faq.html","id":"faq","chapter":"FAQ","heading":"FAQ","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
